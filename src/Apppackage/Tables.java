/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Apppackage;

import com.mysql.jdbc.Statement;
import java.awt.CardLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.*;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.management.Query;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.StandardPieSectionLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;


/**
 *
 * @author Ardley Arrindell
 */
public class Tables extends javax.swing.JFrame {
    

    @Override
    public void setSize(int width, int height) {
        super.setSize(1200, 571);
    }
    static Statement mijnStat;
    public Connection con;
    /**
     * Creates new form NewTable
     */
    public Tables() {
        initComponents();
        this.setSize(850, 550);
        panfbn.setVisible(false);
        panfbp.setVisible(false);
        panfbc.setVisible(false);
        pantneg.setVisible(false);
        pantpos.setVisible(false);
        pantall.setVisible(false);
        panfbt.setVisible(false);
    }
    /*Searchbutton.addActionListener(new ActionListener() 
                {
        @Override
        public void actionPerformed(ActionEvent e)
                {
                   jLabel11.setText("Er zijn geen resultaten voor: "+Searchbar.getText()); 
                }
         });*/
                
private void rbgroup(){
        rbgroup = new ButtonGroup();
        rbgroup.add(TCRB);
        rbgroup.add(FBNRB);
        rbgroup.add(FBPRB);
        rbgroup.add(FBTRB);
        rbgroup.add(TCRB);
        rbgroup.add(TNRB);
        rbgroup.add(TPRB);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rbgroup = new javax.swing.ButtonGroup();
        monthGroup = new javax.swing.ButtonGroup();
        yearGroup = new javax.swing.ButtonGroup();
        FBPRB = new javax.swing.JRadioButton();
        FBNRB = new javax.swing.JRadioButton();
        TCRB = new javax.swing.JRadioButton();
        TPRB = new javax.swing.JRadioButton();
        TNRB = new javax.swing.JRadioButton();
        FBTRB = new javax.swing.JRadioButton();
        FBCRB = new javax.swing.JRadioButton();
        jLabel11 = new javax.swing.JLabel();
        searchbar = new javax.swing.JTextField();
        BackbuttonTable = new javax.swing.JButton();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        pantneg = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        secrb2 = new javax.swing.JRadioButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        fbNegT1 = new javax.swing.JTable();
        fbnpjb1 = new javax.swing.JButton();
        fbnpmb1 = new javax.swing.JButton();
        mrtrb2 = new javax.swing.JRadioButton();
        firstrb2 = new javax.swing.JRadioButton();
        febrb2 = new javax.swing.JRadioButton();
        decrb2 = new javax.swing.JRadioButton();
        janrb2 = new javax.swing.JRadioButton();
        trdrb2 = new javax.swing.JRadioButton();
        meirb2 = new javax.swing.JRadioButton();
        aprrb2 = new javax.swing.JRadioButton();
        frtrb2 = new javax.swing.JRadioButton();
        junrb2 = new javax.swing.JRadioButton();
        julrb2 = new javax.swing.JRadioButton();
        fftrb2 = new javax.swing.JRadioButton();
        augrb2 = new javax.swing.JRadioButton();
        fbnpwb1 = new javax.swing.JButton();
        seprb2 = new javax.swing.JRadioButton();
        novrb2 = new javax.swing.JRadioButton();
        octrb2 = new javax.swing.JRadioButton();
        panfbc = new javax.swing.JPanel();
        fbgrafiek = new javax.swing.JButton();
        fbpie = new javax.swing.JButton();
        fbweek = new javax.swing.JButton();
        fbmaand = new javax.swing.JButton();
        fbjaar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        fbComTable = new javax.swing.JTable();
        jPos = new javax.swing.JLabel();
        jNeg = new javax.swing.JLabel();
        jNeu = new javax.swing.JLabel();
        posfld = new javax.swing.JTextField();
        negfld = new javax.swing.JTextField();
        neufld = new javax.swing.JTextField();
        panfbp = new javax.swing.JPanel();
        fppwb = new javax.swing.JButton();
        fppmb = new javax.swing.JButton();
        fppjb = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        fbPosT = new javax.swing.JTable();
        janrb = new javax.swing.JRadioButton();
        febrb = new javax.swing.JRadioButton();
        mrtrb = new javax.swing.JRadioButton();
        aprrb = new javax.swing.JRadioButton();
        meirb = new javax.swing.JRadioButton();
        junrb = new javax.swing.JRadioButton();
        julrb = new javax.swing.JRadioButton();
        augrb = new javax.swing.JRadioButton();
        seprb = new javax.swing.JRadioButton();
        octrb = new javax.swing.JRadioButton();
        novrb = new javax.swing.JRadioButton();
        decrb = new javax.swing.JRadioButton();
        firstrb = new javax.swing.JRadioButton();
        secrb = new javax.swing.JRadioButton();
        trdrb = new javax.swing.JRadioButton();
        frtrb = new javax.swing.JRadioButton();
        fftrb = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        pantall = new javax.swing.JPanel();
        posfld1 = new javax.swing.JTextField();
        jNeu1 = new javax.swing.JLabel();
        fbjaar1 = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        fbComTable1 = new javax.swing.JTable();
        fbmaand1 = new javax.swing.JButton();
        jNeg1 = new javax.swing.JLabel();
        fbweek1 = new javax.swing.JButton();
        jPos1 = new javax.swing.JLabel();
        fbpie1 = new javax.swing.JButton();
        neufld1 = new javax.swing.JTextField();
        fbgrafiek1 = new javax.swing.JButton();
        negfld1 = new javax.swing.JTextField();
        panfbt = new javax.swing.JPanel();
        fposfld = new javax.swing.JTextField();
        jNeu2 = new javax.swing.JLabel();
        fbtjaar = new javax.swing.JButton();
        fbtmaand = new javax.swing.JButton();
        jNeg2 = new javax.swing.JLabel();
        fbtweek = new javax.swing.JButton();
        jPos2 = new javax.swing.JLabel();
        fbtpie = new javax.swing.JButton();
        fneufld = new javax.swing.JTextField();
        fbtgrafiek = new javax.swing.JButton();
        fnegfld = new javax.swing.JTextField();
        jPos3 = new javax.swing.JLabel();
        jNeg3 = new javax.swing.JLabel();
        jNeu3 = new javax.swing.JLabel();
        tposfld = new javax.swing.JTextField();
        tnegfld = new javax.swing.JTextField();
        tneufld = new javax.swing.JTextField();
        forpie = new javax.swing.JPanel();
        pantpos = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        fbPosT1 = new javax.swing.JTable();
        trdrb3 = new javax.swing.JRadioButton();
        febtrb = new javax.swing.JRadioButton();
        fppmb1 = new javax.swing.JButton();
        frtrb3 = new javax.swing.JRadioButton();
        mrttrb = new javax.swing.JRadioButton();
        fppjb1 = new javax.swing.JButton();
        firstrb3 = new javax.swing.JRadioButton();
        aprtrb = new javax.swing.JRadioButton();
        secrb3 = new javax.swing.JRadioButton();
        meitrb = new javax.swing.JRadioButton();
        fppwb1 = new javax.swing.JButton();
        junrb3 = new javax.swing.JRadioButton();
        julrb3 = new javax.swing.JRadioButton();
        fftrb3 = new javax.swing.JRadioButton();
        augrb3 = new javax.swing.JRadioButton();
        seprb3 = new javax.swing.JRadioButton();
        jantrb = new javax.swing.JRadioButton();
        octrb3 = new javax.swing.JRadioButton();
        decrb3 = new javax.swing.JRadioButton();
        novrb3 = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        panfbn = new javax.swing.JPanel();
        fbnpwb = new javax.swing.JButton();
        fbnpmb = new javax.swing.JButton();
        fbnpjb = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        fbNegT = new javax.swing.JTable();
        secrb1 = new javax.swing.JRadioButton();
        janrb1 = new javax.swing.JRadioButton();
        trdrb1 = new javax.swing.JRadioButton();
        febrb1 = new javax.swing.JRadioButton();
        decrb1 = new javax.swing.JRadioButton();
        mrtrb1 = new javax.swing.JRadioButton();
        firstrb1 = new javax.swing.JRadioButton();
        aprrb1 = new javax.swing.JRadioButton();
        meirb1 = new javax.swing.JRadioButton();
        junrb1 = new javax.swing.JRadioButton();
        frtrb1 = new javax.swing.JRadioButton();
        julrb1 = new javax.swing.JRadioButton();
        fftrb1 = new javax.swing.JRadioButton();
        augrb1 = new javax.swing.JRadioButton();
        seprb1 = new javax.swing.JRadioButton();
        novrb1 = new javax.swing.JRadioButton();
        octrb1 = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        here = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        textarea = new javax.swing.JTextArea();
        commentCountLabel = new javax.swing.JLabel();
        positiefCount = new javax.swing.JLabel();
        negatiefCount = new javax.swing.JLabel();
        Searchbutton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        MainMenu = new javax.swing.JMenuItem();
        OpenMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        ExitMenu = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        TipsMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        rbgroup.add(FBPRB);
        FBPRB.setText("Fb Positief");
        FBPRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FBPRBActionPerformed(evt);
            }
        });

        rbgroup.add(FBNRB);
        FBNRB.setText("Fb Negatief");
        FBNRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FBNRBActionPerformed(evt);
            }
        });

        rbgroup.add(TCRB);
        TCRB.setText("Tw Comments");
        TCRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TCRBActionPerformed(evt);
            }
        });

        rbgroup.add(TPRB);
        TPRB.setText("Tw Positief");
        TPRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TPRBActionPerformed(evt);
            }
        });

        rbgroup.add(TNRB);
        TNRB.setText("Tw Negatief");
        TNRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TNRBActionPerformed(evt);
            }
        });

        rbgroup.add(FBTRB);
        FBTRB.setText("Fb+Tw");
        FBTRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FBTRBActionPerformed(evt);
            }
        });

        rbgroup.add(FBCRB);
        FBCRB.setText("FbComments");
        FBCRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FBCRBActionPerformed(evt);
            }
        });

        jLabel11.setText(" ");

        BackbuttonTable.setText("Back");
        BackbuttonTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BackbuttonTableMouseClicked(evt);
            }
        });

        pantneg.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Twitter Negatief Tabel", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP));
        pantneg.setMinimumSize(new java.awt.Dimension(680, 420));
        pantneg.setName("pantneg"); // NOI18N
        pantneg.setPreferredSize(new java.awt.Dimension(680, 342));

        jLabel2.setText("Selectie per maand van dit jaar:");

        yearGroup.add(secrb2);
        secrb2.setText("2012");
        secrb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                secrb2ActionPerformed(evt);
            }
        });

        fbNegT1.setAutoCreateRowSorter(true);
        fbNegT1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "neg_id", "dates", "amount", "comments"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane5.setViewportView(fbNegT1);
        if (fbNegT1.getColumnModel().getColumnCount() > 0) {
            fbNegT1.getColumnModel().getColumn(0).setMaxWidth(200);
            fbNegT1.getColumnModel().getColumn(1).setMaxWidth(75);
            fbNegT1.getColumnModel().getColumn(2).setMaxWidth(50);
        }

        fbnpjb1.setText("Elk Jaar");
        fbnpjb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fbnpjb1ActionPerformed(evt);
            }
        });

        fbnpmb1.setText("Per Maand");
        fbnpmb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fbnpmb1ActionPerformed(evt);
            }
        });

        monthGroup.add(mrtrb2);
        mrtrb2.setText("mrt");
        mrtrb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mrtrb2ActionPerformed(evt);
            }
        });

        yearGroup.add(firstrb2);
        firstrb2.setText("2011");
        firstrb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstrb2ActionPerformed(evt);
            }
        });

        monthGroup.add(febrb2);
        febrb2.setText("feb");
        febrb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                febrb2ActionPerformed(evt);
            }
        });

        monthGroup.add(decrb2);
        decrb2.setText("dec");
        decrb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decrb2ActionPerformed(evt);
            }
        });

        monthGroup.add(janrb2);
        janrb2.setText("jan");
        janrb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                janrb2ActionPerformed(evt);
            }
        });

        yearGroup.add(trdrb2);
        trdrb2.setText("2013");
        trdrb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trdrb2ActionPerformed(evt);
            }
        });

        monthGroup.add(meirb2);
        meirb2.setText("mei");
        meirb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                meirb2ActionPerformed(evt);
            }
        });

        monthGroup.add(aprrb2);
        aprrb2.setText("apr");
        aprrb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aprrb2ActionPerformed(evt);
            }
        });

        yearGroup.add(frtrb2);
        frtrb2.setText("2014");
        frtrb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frtrb2ActionPerformed(evt);
            }
        });

        monthGroup.add(junrb2);
        junrb2.setText("jun");
        junrb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                junrb2ActionPerformed(evt);
            }
        });

        monthGroup.add(julrb2);
        julrb2.setText("jul");
        julrb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                julrb2ActionPerformed(evt);
            }
        });

        yearGroup.add(fftrb2);
        fftrb2.setText("2015");
        fftrb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fftrb2ActionPerformed(evt);
            }
        });

        monthGroup.add(augrb2);
        augrb2.setText("aug");
        augrb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                augrb2ActionPerformed(evt);
            }
        });

        fbnpwb1.setText("Per Week");
        fbnpwb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fbnpwb1ActionPerformed(evt);
            }
        });

        monthGroup.add(seprb2);
        seprb2.setText("sep");
        seprb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seprb2ActionPerformed(evt);
            }
        });

        monthGroup.add(novrb2);
        novrb2.setText("nov");
        novrb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                novrb2ActionPerformed(evt);
            }
        });

        monthGroup.add(octrb2);
        octrb2.setText("oct");
        octrb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                octrb2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pantnegLayout = new javax.swing.GroupLayout(pantneg);
        pantneg.setLayout(pantnegLayout);
        pantnegLayout.setHorizontalGroup(
            pantnegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pantnegLayout.createSequentialGroup()
                .addGap(248, 248, 248)
                .addComponent(jLabel2)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(pantnegLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5)
                .addContainerGap())
            .addGroup(pantnegLayout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(janrb2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(febrb2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pantnegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pantnegLayout.createSequentialGroup()
                        .addComponent(firstrb2)
                        .addGap(18, 18, 18)
                        .addComponent(secrb2)
                        .addGap(18, 18, 18)
                        .addComponent(trdrb2)
                        .addGap(18, 18, 18)
                        .addComponent(frtrb2)
                        .addGap(18, 18, 18)
                        .addComponent(fftrb2))
                    .addGroup(pantnegLayout.createSequentialGroup()
                        .addComponent(mrtrb2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(aprrb2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(meirb2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(junrb2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(julrb2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(augrb2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(seprb2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(octrb2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(novrb2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(decrb2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pantnegLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(fbnpwb1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(fbnpmb1, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(fbnpjb1, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );
        pantnegLayout.setVerticalGroup(
            pantnegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pantnegLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pantnegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(janrb2)
                    .addComponent(mrtrb2)
                    .addComponent(meirb2)
                    .addComponent(febrb2)
                    .addComponent(aprrb2)
                    .addComponent(junrb2)
                    .addComponent(julrb2)
                    .addComponent(augrb2)
                    .addComponent(seprb2)
                    .addComponent(octrb2)
                    .addComponent(decrb2)
                    .addComponent(novrb2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pantnegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstrb2)
                    .addComponent(secrb2)
                    .addComponent(trdrb2)
                    .addComponent(frtrb2)
                    .addComponent(fftrb2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pantnegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fbnpwb1)
                    .addComponent(fbnpmb1)
                    .addComponent(fbnpjb1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(79, 79, 79))
        );

        jLabel2.getAccessibleContext().setAccessibleDescription("");
        jLabel2.getAccessibleContext().setAccessibleParent(jLayeredPane1);
        secrb2.getAccessibleContext().setAccessibleDescription("");
        secrb2.getAccessibleContext().setAccessibleParent(jLayeredPane1);
        jScrollPane5.getAccessibleContext().setAccessibleDescription("");
        jScrollPane5.getAccessibleContext().setAccessibleParent(jLayeredPane1);
        fbnpjb1.getAccessibleContext().setAccessibleDescription("");
        fbnpjb1.getAccessibleContext().setAccessibleParent(jLayeredPane1);
        fbnpmb1.getAccessibleContext().setAccessibleDescription("");
        fbnpmb1.getAccessibleContext().setAccessibleParent(jLayeredPane1);
        mrtrb2.getAccessibleContext().setAccessibleDescription("");
        mrtrb2.getAccessibleContext().setAccessibleParent(jLayeredPane1);
        firstrb2.getAccessibleContext().setAccessibleDescription("");
        firstrb2.getAccessibleContext().setAccessibleParent(jLayeredPane1);
        febrb2.getAccessibleContext().setAccessibleDescription("");
        febrb2.getAccessibleContext().setAccessibleParent(jLayeredPane1);
        decrb2.getAccessibleContext().setAccessibleDescription("");
        decrb2.getAccessibleContext().setAccessibleParent(jLayeredPane1);
        janrb2.getAccessibleContext().setAccessibleDescription("");
        janrb2.getAccessibleContext().setAccessibleParent(jLayeredPane1);
        trdrb2.getAccessibleContext().setAccessibleDescription("");
        trdrb2.getAccessibleContext().setAccessibleParent(jLayeredPane1);
        meirb2.getAccessibleContext().setAccessibleDescription("");
        meirb2.getAccessibleContext().setAccessibleParent(jLayeredPane1);
        aprrb2.getAccessibleContext().setAccessibleDescription("");
        aprrb2.getAccessibleContext().setAccessibleParent(jLayeredPane1);
        frtrb2.getAccessibleContext().setAccessibleDescription("");
        frtrb2.getAccessibleContext().setAccessibleParent(jLayeredPane1);
        junrb2.getAccessibleContext().setAccessibleDescription("");
        junrb2.getAccessibleContext().setAccessibleParent(jLayeredPane1);
        julrb2.getAccessibleContext().setAccessibleDescription("");
        julrb2.getAccessibleContext().setAccessibleParent(jLayeredPane1);
        fftrb2.getAccessibleContext().setAccessibleDescription("");
        fftrb2.getAccessibleContext().setAccessibleParent(jLayeredPane1);
        augrb2.getAccessibleContext().setAccessibleDescription("");
        augrb2.getAccessibleContext().setAccessibleParent(jLayeredPane1);
        fbnpwb1.getAccessibleContext().setAccessibleDescription("");
        fbnpwb1.getAccessibleContext().setAccessibleParent(jLayeredPane1);
        seprb2.getAccessibleContext().setAccessibleDescription("");
        seprb2.getAccessibleContext().setAccessibleParent(jLayeredPane1);
        novrb2.getAccessibleContext().setAccessibleDescription("");
        novrb2.getAccessibleContext().setAccessibleParent(jLayeredPane1);
        octrb2.getAccessibleContext().setAccessibleDescription("");
        octrb2.getAccessibleContext().setAccessibleParent(jLayeredPane1);

        jLayeredPane1.add(pantneg);
        pantneg.setBounds(0, 80, 680, 342);

        panfbc.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Facebook Alle Comments", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP));
        panfbc.setPreferredSize(new java.awt.Dimension(670, 340));

        fbgrafiek.setText("Maanden dit jaar");
        fbgrafiek.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fbgrafiekActionPerformed(evt);
            }
        });

        fbpie.setText("Piechart");
        fbpie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fbpieActionPerformed(evt);
            }
        });

        fbweek.setText("Alle weken");
        fbweek.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fbweekActionPerformed(evt);
            }
        });

        fbmaand.setText("Alle maanden");
        fbmaand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fbmaandActionPerformed(evt);
            }
        });

        fbjaar.setText("Alle jaren");
        fbjaar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fbjaarActionPerformed(evt);
            }
        });

        fbComTable.setAutoCreateRowSorter(true);
        fbComTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "UserID", "Likes", "Datum", "Gedrag", "Commentaar"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(fbComTable);
        if (fbComTable.getColumnModel().getColumnCount() > 0) {
            fbComTable.getColumnModel().getColumn(0).setMaxWidth(200);
            fbComTable.getColumnModel().getColumn(1).setMaxWidth(50);
            fbComTable.getColumnModel().getColumn(2).setMaxWidth(75);
            fbComTable.getColumnModel().getColumn(3).setMaxWidth(200);
            fbComTable.getColumnModel().getColumn(4).setMaxWidth(1000);
        }

        jPos.setText("Positief:");

        jNeg.setText("Negatief:");

        jNeu.setText("Overig:");

        posfld.setEditable(false);

        negfld.setEditable(false);
        negfld.setText(" ");

        neufld.setEditable(false);
        neufld.setText(" ");

        javax.swing.GroupLayout panfbcLayout = new javax.swing.GroupLayout(panfbc);
        panfbc.setLayout(panfbcLayout);
        panfbcLayout.setHorizontalGroup(
            panfbcLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(panfbcLayout.createSequentialGroup()
                .addGroup(panfbcLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panfbcLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panfbcLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fbgrafiek, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(fbpie, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(panfbcLayout.createSequentialGroup()
                                .addComponent(fbweek, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(fbmaand, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(fbjaar, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(panfbcLayout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(jPos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(posfld, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jNeg)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(negfld, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(122, 122, 122)
                        .addComponent(jNeu)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(neufld, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55)))
                .addContainerGap())
        );
        panfbcLayout.setVerticalGroup(
            panfbcLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panfbcLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addGroup(panfbcLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPos)
                    .addComponent(jNeg)
                    .addComponent(jNeu)
                    .addComponent(posfld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(negfld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(neufld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addGroup(panfbcLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fbweek)
                    .addComponent(fbmaand)
                    .addComponent(fbjaar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fbgrafiek)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fbpie)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jLayeredPane1.add(panfbc);
        panfbc.setBounds(0, 70, 680, 370);
        panfbc.getAccessibleContext().setAccessibleParent(jLayeredPane1);

        panfbp.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Facebook Positief Tabel", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP));

        fppwb.setText("Per Week");
        fppwb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fppwbActionPerformed(evt);
            }
        });

        fppmb.setText("Per Maand");
        fppmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fppmbActionPerformed(evt);
            }
        });

        fppjb.setText("Elk Jaar");
        fppjb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fppjbActionPerformed(evt);
            }
        });

        fbPosT.setAutoCreateRowSorter(true);
        fbPosT.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "pos_id", "dates", "amount", "comments"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        fbPosT.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        fbPosT.setRowSorter(null);
        jScrollPane2.setViewportView(fbPosT);
        if (fbPosT.getColumnModel().getColumnCount() > 0) {
            fbPosT.getColumnModel().getColumn(0).setMaxWidth(200);
            fbPosT.getColumnModel().getColumn(1).setMaxWidth(75);
            fbPosT.getColumnModel().getColumn(2).setMaxWidth(75);
        }

        monthGroup.add(janrb);
        janrb.setText("jan");
        janrb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                janrbActionPerformed(evt);
            }
        });

        monthGroup.add(febrb);
        febrb.setText("feb");
        febrb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                febrbActionPerformed(evt);
            }
        });

        monthGroup.add(mrtrb);
        mrtrb.setText("mrt");
        mrtrb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mrtrbActionPerformed(evt);
            }
        });

        monthGroup.add(aprrb);
        aprrb.setText("apr");
        aprrb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aprrbActionPerformed(evt);
            }
        });

        monthGroup.add(meirb);
        meirb.setText("mei");
        meirb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                meirbActionPerformed(evt);
            }
        });

        monthGroup.add(junrb);
        junrb.setText("jun");
        junrb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                junrbActionPerformed(evt);
            }
        });

        monthGroup.add(julrb);
        julrb.setText("jul");
        julrb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                julrbActionPerformed(evt);
            }
        });

        monthGroup.add(augrb);
        augrb.setText("aug");
        augrb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                augrbActionPerformed(evt);
            }
        });

        monthGroup.add(seprb);
        seprb.setText("sep");
        seprb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seprbActionPerformed(evt);
            }
        });

        monthGroup.add(octrb);
        octrb.setText("oct");
        octrb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                octrbActionPerformed(evt);
            }
        });

        monthGroup.add(novrb);
        novrb.setText("nov");
        novrb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                novrbActionPerformed(evt);
            }
        });

        monthGroup.add(decrb);
        decrb.setText("dec");
        decrb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decrbActionPerformed(evt);
            }
        });

        yearGroup.add(firstrb);
        firstrb.setText("2011");
        firstrb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstrbActionPerformed(evt);
            }
        });

        yearGroup.add(secrb);
        secrb.setText("2012");
        secrb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                secrbActionPerformed(evt);
            }
        });

        yearGroup.add(trdrb);
        trdrb.setText("2013");
        trdrb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trdrbActionPerformed(evt);
            }
        });

        yearGroup.add(frtrb);
        frtrb.setText("2014");
        frtrb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frtrbActionPerformed(evt);
            }
        });

        yearGroup.add(fftrb);
        fftrb.setText("2015");
        fftrb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fftrbActionPerformed(evt);
            }
        });

        jLabel3.setText("Selectie per maand van dit jaar:");

        javax.swing.GroupLayout panfbpLayout = new javax.swing.GroupLayout(panfbp);
        panfbp.setLayout(panfbpLayout);
        panfbpLayout.setHorizontalGroup(
            panfbpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(panfbpLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panfbpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panfbpLayout.createSequentialGroup()
                        .addComponent(fppwb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(fppmb, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(fppjb, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panfbpLayout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addGroup(panfbpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(panfbpLayout.createSequentialGroup()
                                .addComponent(firstrb)
                                .addGap(18, 18, 18)
                                .addComponent(secrb)
                                .addGap(18, 18, 18)
                                .addComponent(trdrb)
                                .addGap(18, 18, 18)
                                .addComponent(frtrb)
                                .addGap(18, 18, 18)
                                .addComponent(fftrb))
                            .addGroup(panfbpLayout.createSequentialGroup()
                                .addGroup(panfbpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addGroup(panfbpLayout.createSequentialGroup()
                                        .addComponent(janrb)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(febrb)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(mrtrb)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(aprrb)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(meirb)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(junrb)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(julrb)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(augrb)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(seprb)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(octrb)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(novrb, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(decrb)
                        .addGap(0, 78, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panfbpLayout.setVerticalGroup(
            panfbpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panfbpLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panfbpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(janrb)
                    .addComponent(mrtrb)
                    .addComponent(meirb)
                    .addComponent(febrb)
                    .addComponent(aprrb)
                    .addComponent(junrb)
                    .addComponent(julrb)
                    .addComponent(augrb)
                    .addComponent(seprb)
                    .addComponent(octrb)
                    .addComponent(decrb)
                    .addComponent(novrb))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panfbpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstrb)
                    .addComponent(secrb)
                    .addComponent(trdrb)
                    .addComponent(frtrb)
                    .addComponent(fftrb))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panfbpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fppwb)
                    .addComponent(fppjb)
                    .addComponent(fppmb))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jLayeredPane1.add(panfbp);
        panfbp.setBounds(0, 60, 670, 360);

        pantall.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Twitter Alle Comments", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP));
        pantall.setMinimumSize(new java.awt.Dimension(680, 420));

        posfld1.setEditable(false);

        jNeu1.setText("Overig:");

        fbjaar1.setText("Alle jaren");
        fbjaar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fbjaar1ActionPerformed(evt);
            }
        });

        fbComTable1.setAutoCreateRowSorter(true);
        fbComTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "UserID", "Likes", "Datum", "Gedrag", "Commentaar"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(fbComTable1);
        if (fbComTable1.getColumnModel().getColumnCount() > 0) {
            fbComTable1.getColumnModel().getColumn(0).setMaxWidth(200);
            fbComTable1.getColumnModel().getColumn(1).setMaxWidth(50);
            fbComTable1.getColumnModel().getColumn(2).setMaxWidth(75);
            fbComTable1.getColumnModel().getColumn(3).setMaxWidth(200);
            fbComTable1.getColumnModel().getColumn(4).setMaxWidth(1000);
        }

        fbmaand1.setText("Alle maanden");
        fbmaand1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fbmaand1ActionPerformed(evt);
            }
        });

        jNeg1.setText("Negatief:");

        fbweek1.setText("Alle weken");
        fbweek1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fbweek1ActionPerformed(evt);
            }
        });

        jPos1.setText("Positief:");

        fbpie1.setText("Piechart");
        fbpie1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fbpie1ActionPerformed(evt);
            }
        });

        neufld1.setEditable(false);
        neufld1.setText(" ");

        fbgrafiek1.setText("Maanden dit jaar");
        fbgrafiek1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fbgrafiek1ActionPerformed(evt);
            }
        });

        negfld1.setEditable(false);
        negfld1.setText(" ");
        negfld1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                negfld1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pantallLayout = new javax.swing.GroupLayout(pantall);
        pantall.setLayout(pantallLayout);
        pantallLayout.setHorizontalGroup(
            pantallLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pantallLayout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addComponent(jPos1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(posfld1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jNeg1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(negfld1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(122, 122, 122)
                .addComponent(jNeu1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(neufld1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(148, 148, 148))
            .addGroup(pantallLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pantallLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7)
                    .addGroup(pantallLayout.createSequentialGroup()
                        .addGroup(pantallLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(fbgrafiek1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pantallLayout.createSequentialGroup()
                                .addComponent(fbweek1, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(fbmaand1, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(fbjaar1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(fbpie1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 10, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pantallLayout.setVerticalGroup(
            pantallLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pantallLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addGroup(pantallLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPos1)
                    .addComponent(jNeg1)
                    .addComponent(jNeu1)
                    .addComponent(posfld1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(negfld1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(neufld1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addGroup(pantallLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fbweek1)
                    .addComponent(fbmaand1)
                    .addComponent(fbjaar1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fbgrafiek1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fbpie1)
                .addContainerGap(63, Short.MAX_VALUE))
        );

        jLayeredPane1.add(pantall);
        pantall.setBounds(10, 50, 692, 360);
        pantall.getAccessibleContext().setAccessibleName("");
        pantall.getAccessibleContext().setAccessibleParent(jLayeredPane1);

        panfbt.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Facebook vs Twitter Tabel", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP));
        panfbt.setMinimumSize(new java.awt.Dimension(680, 420));

        fposfld.setEditable(false);

        jNeu2.setText("FB-Overig:");

        fbtjaar.setText("Alle jaren");
        fbtjaar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fbtjaarActionPerformed(evt);
            }
        });

        fbtmaand.setText("Alle maanden");
        fbtmaand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fbtmaandActionPerformed(evt);
            }
        });

        jNeg2.setText("FB-Negatief:");

        fbtweek.setText("Alle weken");
        fbtweek.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fbtweekActionPerformed(evt);
            }
        });

        jPos2.setText("FB-Positief:");

        fbtpie.setText("Piechart");
        fbtpie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fbtpieActionPerformed(evt);
            }
        });

        fneufld.setEditable(false);
        fneufld.setText(" ");

        fbtgrafiek.setText("Maanden dit jaar");
        fbtgrafiek.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fbtgrafiekActionPerformed(evt);
            }
        });

        fnegfld.setEditable(false);
        fnegfld.setText(" ");

        jPos3.setText("T-Positief:");

        jNeg3.setText("T-Negatief:");

        jNeu3.setText("T-Overig:");

        tposfld.setEditable(false);

        tnegfld.setEditable(false);
        tnegfld.setText(" ");

        tneufld.setEditable(false);
        tneufld.setText(" ");

        forpie.setPreferredSize(new java.awt.Dimension(190, 190));

        javax.swing.GroupLayout forpieLayout = new javax.swing.GroupLayout(forpie);
        forpie.setLayout(forpieLayout);
        forpieLayout.setHorizontalGroup(
            forpieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 190, Short.MAX_VALUE)
        );
        forpieLayout.setVerticalGroup(
            forpieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 190, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panfbtLayout = new javax.swing.GroupLayout(panfbt);
        panfbt.setLayout(panfbtLayout);
        panfbtLayout.setHorizontalGroup(
            panfbtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panfbtLayout.createSequentialGroup()
                .addGroup(panfbtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panfbtLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panfbtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fbtgrafiek, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(fbtpie, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panfbtLayout.createSequentialGroup()
                                .addComponent(fbtweek, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addGroup(panfbtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(forpie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(panfbtLayout.createSequentialGroup()
                                        .addComponent(fbtmaand, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(fbtjaar, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(panfbtLayout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addGroup(panfbtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(panfbtLayout.createSequentialGroup()
                                .addComponent(jPos3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tposfld, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panfbtLayout.createSequentialGroup()
                                .addComponent(jPos2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(fposfld, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 102, Short.MAX_VALUE)
                        .addGroup(panfbtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(panfbtLayout.createSequentialGroup()
                                .addComponent(jNeg2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fnegfld, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panfbtLayout.createSequentialGroup()
                                .addComponent(jNeg3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tnegfld, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(122, 122, 122)
                        .addGroup(panfbtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panfbtLayout.createSequentialGroup()
                                .addComponent(jNeu2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fneufld, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panfbtLayout.createSequentialGroup()
                                .addComponent(jNeu3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tneufld, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(55, 55, 55)))
                .addContainerGap())
        );
        panfbtLayout.setVerticalGroup(
            panfbtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panfbtLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(forpie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(panfbtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPos2)
                    .addComponent(jNeg2)
                    .addComponent(jNeu2)
                    .addComponent(fposfld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fnegfld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fneufld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(panfbtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPos3)
                    .addComponent(jNeg3)
                    .addComponent(jNeu3)
                    .addComponent(tnegfld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tposfld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tneufld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panfbtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fbtweek)
                    .addComponent(fbtmaand)
                    .addComponent(fbtjaar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fbtgrafiek)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fbtpie)
                .addContainerGap(44, Short.MAX_VALUE))
        );

        jLayeredPane1.add(panfbt);
        panfbt.setBounds(0, 40, 692, 445);
        panfbt.getAccessibleContext().setAccessibleName("");
        panfbt.getAccessibleContext().setAccessibleParent(jLayeredPane1);

        pantpos.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Twitter Positief Tabel", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP));
        pantpos.setMinimumSize(new java.awt.Dimension(680, 420));

        fbPosT1.setAutoCreateRowSorter(true);
        fbPosT1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "pos_id", "dates", "amount", "comments"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        fbPosT1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        fbPosT1.setRowSorter(null);
        jScrollPane6.setViewportView(fbPosT1);
        if (fbPosT1.getColumnModel().getColumnCount() > 0) {
            fbPosT1.getColumnModel().getColumn(0).setMaxWidth(200);
            fbPosT1.getColumnModel().getColumn(1).setMaxWidth(75);
            fbPosT1.getColumnModel().getColumn(2).setMaxWidth(75);
        }

        yearGroup.add(trdrb3);
        trdrb3.setText("2013");
        trdrb3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trdrb3ActionPerformed(evt);
            }
        });

        monthGroup.add(febtrb);
        febtrb.setText("feb");
        febtrb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                febtrbActionPerformed(evt);
            }
        });

        fppmb1.setText("Per Maand");
        fppmb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fppmb1ActionPerformed(evt);
            }
        });

        yearGroup.add(frtrb3);
        frtrb3.setText("2014");
        frtrb3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frtrb3ActionPerformed(evt);
            }
        });

        monthGroup.add(mrttrb);
        mrttrb.setText("mrt");
        mrttrb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mrttrbActionPerformed(evt);
            }
        });

        fppjb1.setText("Elk Jaar");
        fppjb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fppjb1ActionPerformed(evt);
            }
        });

        yearGroup.add(firstrb3);
        firstrb3.setText("2011");
        firstrb3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstrb3ActionPerformed(evt);
            }
        });

        monthGroup.add(aprtrb);
        aprtrb.setText("apr");
        aprtrb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aprtrbActionPerformed(evt);
            }
        });

        yearGroup.add(secrb3);
        secrb3.setText("2012");
        secrb3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                secrb3ActionPerformed(evt);
            }
        });

        monthGroup.add(meitrb);
        meitrb.setText("mei");
        meitrb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                meitrbActionPerformed(evt);
            }
        });

        fppwb1.setText("Per Week");
        fppwb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fppwb1ActionPerformed(evt);
            }
        });

        monthGroup.add(junrb3);
        junrb3.setText("jun");
        junrb3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                junrb3ActionPerformed(evt);
            }
        });

        monthGroup.add(julrb3);
        julrb3.setText("jul");
        julrb3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                julrb3ActionPerformed(evt);
            }
        });

        yearGroup.add(fftrb3);
        fftrb3.setText("2015");
        fftrb3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fftrb3ActionPerformed(evt);
            }
        });

        monthGroup.add(augrb3);
        augrb3.setText("aug");
        augrb3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                augrb3ActionPerformed(evt);
            }
        });

        monthGroup.add(seprb3);
        seprb3.setText("sep");
        seprb3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seprb3ActionPerformed(evt);
            }
        });

        monthGroup.add(jantrb);
        jantrb.setText("jan");
        jantrb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jantrbActionPerformed(evt);
            }
        });

        monthGroup.add(octrb3);
        octrb3.setText("oct");
        octrb3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                octrb3ActionPerformed(evt);
            }
        });

        monthGroup.add(decrb3);
        decrb3.setText("dec");
        decrb3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decrb3ActionPerformed(evt);
            }
        });

        monthGroup.add(novrb3);
        novrb3.setText("nov");
        novrb3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                novrb3ActionPerformed(evt);
            }
        });

        jLabel4.setText("Selectie per maand van dit jaar:");

        javax.swing.GroupLayout pantposLayout = new javax.swing.GroupLayout(pantpos);
        pantpos.setLayout(pantposLayout);
        pantposLayout.setHorizontalGroup(
            pantposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pantposLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pantposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6)
                    .addGroup(pantposLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(fppwb1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fppmb1, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(fppjb1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pantposLayout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addGroup(pantposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pantposLayout.createSequentialGroup()
                                .addComponent(firstrb3)
                                .addGap(18, 18, 18)
                                .addComponent(secrb3)
                                .addGap(18, 18, 18)
                                .addComponent(trdrb3)
                                .addGap(18, 18, 18)
                                .addComponent(frtrb3)
                                .addGap(18, 18, 18)
                                .addComponent(fftrb3))
                            .addGroup(pantposLayout.createSequentialGroup()
                                .addComponent(jantrb)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(febtrb)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mrttrb)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(aprtrb)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pantposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(pantposLayout.createSequentialGroup()
                                        .addComponent(meitrb)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(junrb3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(julrb3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(augrb3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(seprb3))
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(octrb3)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(novrb3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(decrb3)
                        .addGap(0, 94, Short.MAX_VALUE)))
                .addGap(16, 16, 16))
        );
        pantposLayout.setVerticalGroup(
            pantposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pantposLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pantposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jantrb)
                    .addComponent(mrttrb)
                    .addComponent(meitrb)
                    .addComponent(febtrb)
                    .addComponent(aprtrb)
                    .addComponent(junrb3)
                    .addComponent(julrb3)
                    .addComponent(augrb3)
                    .addComponent(seprb3)
                    .addComponent(octrb3)
                    .addComponent(decrb3)
                    .addComponent(novrb3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pantposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstrb3)
                    .addComponent(secrb3)
                    .addComponent(trdrb3)
                    .addComponent(frtrb3)
                    .addComponent(fftrb3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pantposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fppwb1)
                    .addComponent(fppjb1)
                    .addComponent(fppmb1))
                .addContainerGap(66, Short.MAX_VALUE))
        );

        jLayeredPane1.add(pantpos);
        pantpos.setBounds(20, 30, 692, 410);
        pantpos.getAccessibleContext().setAccessibleName("");
        pantpos.getAccessibleContext().setAccessibleParent(jLayeredPane1);

        panfbn.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Facebook Negatieve Tabel", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP));
        panfbn.setPreferredSize(new java.awt.Dimension(670, 340));

        fbnpwb.setText("Per Week");
        fbnpwb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fbnpwbActionPerformed(evt);
            }
        });

        fbnpmb.setText("Per Maand");
        fbnpmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fbnpmbActionPerformed(evt);
            }
        });

        fbnpjb.setText("Elk Jaar");
        fbnpjb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fbnpjbActionPerformed(evt);
            }
        });

        fbNegT.setAutoCreateRowSorter(true);
        fbNegT.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "neg_id", "dates", "amount", "comments"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane4.setViewportView(fbNegT);
        if (fbNegT.getColumnModel().getColumnCount() > 0) {
            fbNegT.getColumnModel().getColumn(0).setMaxWidth(200);
            fbNegT.getColumnModel().getColumn(1).setMaxWidth(75);
            fbNegT.getColumnModel().getColumn(2).setMaxWidth(50);
        }

        yearGroup.add(secrb1);
        secrb1.setText("2012");
        secrb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                secrb1ActionPerformed(evt);
            }
        });

        monthGroup.add(janrb1);
        janrb1.setText("jan");
        janrb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                janrb1ActionPerformed(evt);
            }
        });

        yearGroup.add(trdrb1);
        trdrb1.setText("2013");
        trdrb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trdrb1ActionPerformed(evt);
            }
        });

        monthGroup.add(febrb1);
        febrb1.setText("feb");
        febrb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                febrb1ActionPerformed(evt);
            }
        });

        monthGroup.add(decrb1);
        decrb1.setText("dec");
        decrb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decrb1ActionPerformed(evt);
            }
        });

        monthGroup.add(mrtrb1);
        mrtrb1.setText("mrt");
        mrtrb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mrtrb1ActionPerformed(evt);
            }
        });

        yearGroup.add(firstrb1);
        firstrb1.setText("2011");
        firstrb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstrb1ActionPerformed(evt);
            }
        });

        monthGroup.add(aprrb1);
        aprrb1.setText("apr");
        aprrb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aprrb1ActionPerformed(evt);
            }
        });

        monthGroup.add(meirb1);
        meirb1.setText("mei");
        meirb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                meirb1ActionPerformed(evt);
            }
        });

        monthGroup.add(junrb1);
        junrb1.setText("jun");
        junrb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                junrb1ActionPerformed(evt);
            }
        });

        yearGroup.add(frtrb1);
        frtrb1.setText("2014");
        frtrb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frtrb1ActionPerformed(evt);
            }
        });

        monthGroup.add(julrb1);
        julrb1.setText("jul");
        julrb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                julrb1ActionPerformed(evt);
            }
        });

        yearGroup.add(fftrb1);
        fftrb1.setText("2015");
        fftrb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fftrb1ActionPerformed(evt);
            }
        });

        monthGroup.add(augrb1);
        augrb1.setText("aug");
        augrb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                augrb1ActionPerformed(evt);
            }
        });

        monthGroup.add(seprb1);
        seprb1.setText("sep");
        seprb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seprb1ActionPerformed(evt);
            }
        });

        monthGroup.add(novrb1);
        novrb1.setText("nov");
        novrb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                novrb1ActionPerformed(evt);
            }
        });

        monthGroup.add(octrb1);
        octrb1.setText("oct");
        octrb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                octrb1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Selectie per maand van dit jaar:");

        javax.swing.GroupLayout panfbnLayout = new javax.swing.GroupLayout(panfbn);
        panfbn.setLayout(panfbnLayout);
        panfbnLayout.setHorizontalGroup(
            panfbnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panfbnLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panfbnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addGroup(panfbnLayout.createSequentialGroup()
                        .addGap(238, 238, 238)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(panfbnLayout.createSequentialGroup()
                        .addComponent(fbnpwb, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(fbnpmb, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addComponent(fbnpjb, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panfbnLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(panfbnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(panfbnLayout.createSequentialGroup()
                                .addComponent(firstrb1)
                                .addGap(18, 18, 18)
                                .addComponent(secrb1)
                                .addGap(18, 18, 18)
                                .addComponent(trdrb1)
                                .addGap(18, 18, 18)
                                .addComponent(frtrb1)
                                .addGap(18, 18, 18)
                                .addComponent(fftrb1))
                            .addGroup(panfbnLayout.createSequentialGroup()
                                .addComponent(janrb1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(febrb1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mrtrb1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(aprrb1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(meirb1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(junrb1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(julrb1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(augrb1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(seprb1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(octrb1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(novrb1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(decrb1)
                        .addGap(85, 85, 85)))
                .addContainerGap())
        );
        panfbnLayout.setVerticalGroup(
            panfbnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panfbnLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panfbnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(janrb1)
                    .addComponent(mrtrb1)
                    .addComponent(meirb1)
                    .addComponent(febrb1)
                    .addComponent(aprrb1)
                    .addComponent(junrb1)
                    .addComponent(julrb1)
                    .addComponent(augrb1)
                    .addComponent(seprb1)
                    .addComponent(octrb1)
                    .addComponent(decrb1)
                    .addComponent(novrb1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panfbnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstrb1)
                    .addComponent(secrb1)
                    .addComponent(trdrb1)
                    .addComponent(frtrb1)
                    .addComponent(fftrb1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panfbnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fbnpwb)
                    .addComponent(fbnpmb)
                    .addComponent(fbnpjb))
                .addContainerGap(79, Short.MAX_VALUE))
        );

        jLayeredPane1.add(panfbn);
        panfbn.setBounds(10, 0, 680, 420);

        here.setText("Maak keuze:");
        here.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                hereMouseClicked(evt);
            }
        });

        textarea.setColumns(20);
        textarea.setRows(5);
        jScrollPane3.setViewportView(textarea);

        commentCountLabel.setText("Totaal:");

        positiefCount.setText("Positief:");

        negatiefCount.setText("Negatief:");

        Searchbutton.setText("Zoeken");
        Searchbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchbuttonActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        MainMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        MainMenu.setText("Main");
        MainMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MainMenuActionPerformed(evt);
            }
        });
        jMenu1.add(MainMenu);

        OpenMenu.setText("Open");

        jMenuItem1.setText("jMenuItem1");
        OpenMenu.add(jMenuItem1);

        jMenuItem2.setText("jMenuItem2");
        OpenMenu.add(jMenuItem2);

        jMenuItem3.setText("jMenuItem3");
        OpenMenu.add(jMenuItem3);

        jMenuItem4.setText("jMenuItem4");
        OpenMenu.add(jMenuItem4);

        jMenu1.add(OpenMenu);

        ExitMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        ExitMenu.setText("Exit");
        ExitMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitMenuActionPerformed(evt);
            }
        });
        jMenu1.add(ExitMenu);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        TipsMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        TipsMenu.setText("Tips");
        TipsMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TipsMenuActionPerformed(evt);
            }
        });
        jMenu2.add(TipsMenu);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(TCRB)
                                    .addComponent(TPRB)
                                    .addComponent(TNRB)
                                    .addComponent(FBTRB)
                                    .addComponent(FBCRB)
                                    .addComponent(FBPRB)
                                    .addComponent(FBNRB)
                                    .addComponent(BackbuttonTable, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(here, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 690, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(commentCountLabel)
                                .addGap(48, 48, 48)
                                .addComponent(positiefCount)
                                .addGap(46, 46, 46)
                                .addComponent(negatiefCount))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(searchbar, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Searchbutton)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Searchbutton)
                            .addComponent(searchbar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(commentCountLabel)
                            .addComponent(positiefCount)
                            .addComponent(negatiefCount))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLayeredPane1)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addComponent(here, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(FBCRB)
                .addGap(18, 18, 18)
                .addComponent(FBPRB)
                .addGap(18, 18, 18)
                .addComponent(FBNRB)
                .addGap(18, 18, 18)
                .addComponent(TCRB)
                .addGap(18, 18, 18)
                .addComponent(TPRB)
                .addGap(18, 18, 18)
                .addComponent(TNRB)
                .addGap(18, 18, 18)
                .addComponent(FBTRB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BackbuttonTable, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void MainMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MainMenuActionPerformed
    GraphChoose graphChoose = new GraphChoose();
    graphChoose.setVisible(true);
    Tables.this.dispose();
}//GEN-LAST:event_MainMenuActionPerformed

private void ExitMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitMenuActionPerformed
     Tables.this.dispose();
}//GEN-LAST:event_ExitMenuActionPerformed

private void TipsMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TipsMenuActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_TipsMenuActionPerformed

private void showInTable(){
    if (fftrb.isSelected()){
        rbgroup.clearSelection();
        panfbn.setVisible(false);
        panfbc.setVisible(false);
        panfbp.setVisible(true); 
        this.setSize(850, 550);
        panfbp.setLocation(5, 5);
        panfbp.setSize(680, 380);
        /*String connectionUrl = "jdbc:mysql://localhost/barbawapatest";
        String driver = "com.mysql.jdbc.Driver";
        try{
             

        //Class.forName(driver);
        try {
            con = DriverManager.getConnection(connectionUrl, "root", "root");
            mijnStat = con.createStatement();
        } catch (SQLException ex) {
            Logger.getLogger(Table.class.getName()).log(Level.SEVERE, null, ex);
        }
        */try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();
            
            //create connection
           
            Statement state = (Statement) con.createStatement();
            ResultSet rs = state.executeQuery("select * from FbComments where mood = 'positief' and year(dates) = '2015'");
            //EXTERNE DATABASE!!!__________________
            //ResultSet rs = state.executeQuery("select * from FbComments where year(dates) = '2015'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<5; i++)
            {
                columns_name.addElement(rsmdata.getColumnName(i));
            }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {
                data_rows = new Vector();
                for(int j=1; j<5; j++)
                {
                    data_rows.addElement(rs.getString(j));
                }
                dtm.addRow(data_rows);                
            }
            //pass default table object over into jtable
            fbPosT.setModel(dtm);
        }   catch (SQLException ex) {
                Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } 
}   
}        
private void FBPRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FBPRBActionPerformed
        yearGroup.clearSelection();  
        monthGroup.clearSelection();  
        panfbn.setVisible(false);
        panfbc.setVisible(false);
        pantneg.setVisible(false);
        pantpos.setVisible(false);
        pantall.setVisible(false);
        panfbt.setVisible(false);
        panfbp.setVisible(true); 
        //this.setSize(850, 550);
        panfbp.setLocation(5, 5);
        panfbp.setSize(680, 432);
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            ResultSet rs = state.executeQuery("select * from FbComments where mood = 'positief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<7; i++)
            {
                columns_name.addElement(rsmdata.getColumnName(i));
            }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {
                data_rows = new Vector();
                for(int j=1; j<7; j++)
                {
                    data_rows.addElement(rs.getString(j));
                }
                dtm.addRow(data_rows);                
            }
            //pass default table object over into jtable
            fbPosT.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_FBPRBActionPerformed

private void TNRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TNRBActionPerformed
        pantneg.setVisible(true);
        yearGroup.clearSelection();  
        monthGroup.clearSelection();  
        panfbn.setVisible(false);
        panfbp.setVisible(false);
        panfbc.setVisible(false);
        pantpos.setVisible(false);
        pantall.setVisible(false);
        panfbt.setVisible(false);
        //this.setSize(850, 550);
        pantneg.setLocation(5, 5);
        pantneg.setSize(680, 432);
       
        try{
         //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
                String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
                Connection con = Database.Connectie.getConnection();            
            //create connection           
                Statement state = (Statement) con.createStatement();
                ResultSet rs = state.executeQuery("select * from tweets where mood = 'negatief' and year(dates) = '2015'");
                ResultSetMetaData rsmdata = rs.getMetaData();
                //store column numbers
                int columns = rsmdata.getColumnCount();
                //set data into Jtable
                DefaultTableModel dtm = new DefaultTableModel();
                Vector columns_name = new Vector();
                Vector data_rows = new Vector();
                
                for (int i=1; i<5; i++)
                {
                    columns_name.addElement(rsmdata.getColumnName(i));
                }
                dtm.setColumnIdentifiers(columns_name);
                
                while(rs.next())
                {
                    data_rows = new Vector();
                    for(int j=1; j<5; j++)
                    {
                        data_rows.addElement(rs.getString(j));
                    }
                    dtm.addRow(data_rows);                
                }
                //pass default table object over into jtable
                fbNegT1.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        }
              
}//GEN-LAST:event_TNRBActionPerformed

private void FBTRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FBTRBActionPerformed
        panfbt.setVisible(true);
        pantneg.setVisible(false);
        yearGroup.clearSelection();  
        monthGroup.clearSelection();  
        panfbn.setVisible(false);
        panfbp.setVisible(false);
        panfbc.setVisible(false);
        pantneg.setVisible(false);
        pantpos.setVisible(false);
        pantall.setVisible(false);
       //this.setSize(850, 550);
     panfbt.setLocation(5, 5);
     panfbt.setSize(680, 432);
     yearGroup.clearSelection();  
        monthGroup.clearSelection();  
        
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();           
            //create connection           
            Statement state = (Statement) con.createStatement();
           //EXTERNE DATABASE QUERY!!__________________
            ResultSet rs = state.executeQuery("SELECT count(mood)as positive FROM FbComments where mood = 'positief'");
            while (rs.next()) {
                fposfld.setText(rs.getString(WIDTH));
            }
            
            ResultSet rs1 = state.executeQuery("SELECT count(mood)FROM FbComments where mood = 'negatief'");
            while (rs1.next()) {
                fnegfld.setText(rs1.getString(WIDTH));
            }
            
            ResultSet rs2 = state.executeQuery("SELECT count(mood)FROM FbComments where mood = 'no keywords'");
            while (rs2.next()) {
                fneufld.setText(rs2.getString(WIDTH));
            }
            
            ResultSet rs3 = state.executeQuery("SELECT count(mood)as positive FROM tweets where mood = 'positief'");
            while (rs3.next()) {
                tposfld.setText(rs3.getString(WIDTH));
            }
            
            ResultSet rs4 = state.executeQuery("SELECT count(mood)FROM tweets where mood = 'negatief'");
            while (rs4.next()) {
                tnegfld.setText(rs4.getString(WIDTH));
            }
            
            ResultSet rs5 = state.executeQuery("SELECT count(mood)FROM tweets where mood = 'no keywords'");
            while (rs5.next()) {
                tneufld.setText(rs5.getString(WIDTH));
            }
            
            } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        }                    
}//GEN-LAST:event_FBTRBActionPerformed

private void FBCRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FBCRBActionPerformed
      yearGroup.clearSelection();  
      monthGroup.clearSelection();  
      panfbn.setVisible(false);
        panfbp.setVisible(false);
        pantneg.setVisible(false);
        pantpos.setVisible(false);
        pantall.setVisible(false);
        panfbt.setVisible(false);
      panfbc.setVisible(true);
      //this.setSize(850, 550);
      panfbc.setLocation(5, 5);
      panfbc.setSize(680, 432);
      try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            ResultSet rs = state.executeQuery("select * from FbComments");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();
            
            for (int i=1; i<7; i++)
            {
                columns_name.addElement(rsmdata.getColumnName(i));
            }
            dtm.setColumnIdentifiers(columns_name);
            
            while(rs.next())
            {
                data_rows = new Vector();
                for(int j=1; j<7; j++)
                {
                    data_rows.addElement(rs.getString(j));
                }
                dtm.addRow(data_rows);                
            }
            //pass default table object over into jtable
            fbComTable.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();           
            //create connection           
            Statement state = (Statement) con.createStatement();
           //EXTERNE DATABASE QUERY!!__________________
            ResultSet rs = state.executeQuery("SELECT count(mood)as positive FROM FbComments where mood = 'positief'");
            while (rs.next()) {
                posfld.setText(rs.getString(WIDTH));
            }
            
            ResultSet rs1 = state.executeQuery("SELECT count(mood)FROM FbComments where mood = 'negatief'");
            while (rs1.next()) {
                negfld.setText(rs1.getString(WIDTH));
            }
            
            ResultSet rs2 = state.executeQuery("SELECT count(mood)FROM FbComments where mood = 'no keywords'");
            while (rs2.next()) {
                neufld.setText(rs2.getString(WIDTH));
            }
            
            } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        }
            
}//GEN-LAST:event_FBCRBActionPerformed

private void BackbuttonTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BackbuttonTableMouseClicked
    GraphChoose graphChoose = new GraphChoose();
    graphChoose.setVisible(true);
    Tables.this.dispose();
}//GEN-LAST:event_BackbuttonTableMouseClicked

    private void fbmaandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fbmaandActionPerformed
  try{
            String query="SELECT extract(MONTH from dates), count(*) FROM FbComments GROUP BY extract(MONTH from dates)";            
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Over de jaren", "Months", "users", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
}
    }
    }//GEN-LAST:event_fbmaandActionPerformed

    private void fbnpmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fbnpmbActionPerformed
      try{
            String query="SELECT extract(MONTH from dates), count(*) FROM FbComments where mood= 'negatief' and year(dates) = '2015' GROUP BY extract(MONTH from dates)";

//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Over de jaren", "Months", "users", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{
        
}
    }
    }//GEN-LAST:event_fbnpmbActionPerformed

    private void FBNRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FBNRBActionPerformed
        try {
            yearGroup.clearSelection();  
            monthGroup.clearSelection();  
            panfbn.setVisible(true);
        panfbp.setVisible(false);
        pantneg.setVisible(false);
        pantpos.setVisible(false);
        pantall.setVisible(false);
        panfbt.setVisible(false);
            panfbc.setVisible(false);
            //this.setSize(850, 450);
            panfbn.setLocation(5, 5);
            panfbn.setSize(680, 432);
            /*String connectionUrl = "jdbc:mysql://localhost/barbawapatest";
            String driver = "com.mysql.jdbc.Driver";
            //try{
                 

            //Class.forName(driver);
            try {
                con = DriverManager.getConnection(connectionUrl, "root", "root");
                mijnStat = con.createStatement();
            } catch (SQLException ex) {
                Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
            }*/
           
            //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
                String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
                Connection con = Database.Connectie.getConnection();            
            //create connection           
                Statement state = (Statement) con.createStatement();
                ResultSet rs = state.executeQuery("select * from FbComments where mood = 'negatief' and year(dates) = '2015'");
                ResultSetMetaData rsmdata = rs.getMetaData();
                //store column numbers
                int columns = rsmdata.getColumnCount();
                //set data into Jtable
                DefaultTableModel dtm = new DefaultTableModel();
                Vector columns_name = new Vector();
                Vector data_rows = new Vector();
                
                for (int i=1; i<5; i++)
                {
                    columns_name.addElement(rsmdata.getColumnName(i));
                }
                dtm.setColumnIdentifiers(columns_name);
                
                while(rs.next())
                {
                    data_rows = new Vector();
                    for(int j=1; j<5; j++)
                    {
                        data_rows.addElement(rs.getString(j));
                    }
                    dtm.addRow(data_rows);                
                }
                //pass default table object over into jtable
                fbNegT.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_FBNRBActionPerformed

    private void hereMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hereMouseClicked
        panfbn.setVisible(false);
        panfbp.setVisible(false);
        panfbc.setVisible(false);
        rbgroup.clearSelection();        
    }//GEN-LAST:event_hereMouseClicked

    private void fppjbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fppjbActionPerformed
      try{
            String query="SELECT extract(year from dates), count(*) FROM FbComments where mood = 'positief' GROUP BY extract(year from dates)";            
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Reacties per jaar", "year", "users", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
}
    }
    }//GEN-LAST:event_fppjbActionPerformed

    private void fbjaarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fbjaarActionPerformed
         try{
            String query="SELECT extract(year from dates), count(*) FROM FbComments GROUP BY extract(year from dates)";            
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Reacties per jaar", "year", "users", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
}
    }
    }//GEN-LAST:event_fbjaarActionPerformed

    private void fppmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fppmbActionPerformed
     try{                    
//EXTERNE DATABASE!!______________________
        String query="SELECT extract(month from dates), count(commentBody) FROM FbComments where mood = 'positief' and year(dates) = '2015' group by month(dates);";
        JDBCCategoryDataset dataset =new JDBCCategoryDataset(Database.Connectie.getConnection(),query);
        
        JFreeChart chart = ChartFactory.createLineChart("Reactions", "Months", "users", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
}
    }
    }//GEN-LAST:event_fppmbActionPerformed

    private void fbweekActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fbweekActionPerformed
      try{
            String query="SELECT extract(week from dates), count(*) FROM FbComments GROUP BY extract(week from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Welke weken zijn ze het meest actief", "weeks", "users", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
}
    }
    }//GEN-LAST:event_fbweekActionPerformed

    private void fbpieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fbpieActionPerformed
            //RECIEVED VALUES ARE STORED IN THESE TEXT FIELDS
            String positive = posfld.getText();
            String negative = negfld.getText();
            String neutraal = neufld.getText();
            //SETS VALUES INTO THE PIECHART
            DefaultPieDataset piedata = new DefaultPieDataset();
            piedata.setValue("Positief", new Integer(positive));
            piedata.setValue("Negatief", new Integer(negative));
            piedata.setValue("Neutraal", new Integer(neutraal));
            JFreeChart ch = ChartFactory.createPieChart("Vergelijking", piedata, true, true, true);
            PiePlot p = (PiePlot)ch.getPlot();
            ChartFrame frame = new ChartFrame("Vergelijking", ch);
            frame.setVisible(true);
            frame.setSize(400,500);
    }//GEN-LAST:event_fbpieActionPerformed

    private void fbgrafiekActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fbgrafiekActionPerformed
      if(fftrb.isEnabled()){
          try{
            String query="SELECT extract(month from dates), count(*) FROM FbComments where year(dates) = '2015' GROUP BY extract(month from dates)";
           
            
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Reacties van 2015", "Maanden", "Aantal reacties van gebruikers", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }         
        }    
      
      else if(frtrb.isEnabled()){
          try{
            String query="SELECT extract(month from dates), count(*) FROM FbComments where year(dates) = '2014' GROUP BY extract(month from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Reacties van 2014", "Maanden", "Aantal reacties van gebruikers", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }         
        }    
        
      else if(trdrb.isEnabled()){
          try{
            String query="SELECT extract(month from dates), count(*) FROM FbComments where year(dates) = '2013' GROUP BY extract(month from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Reacties van 2013", "Maanden", "Aantal reacties van gebruikers", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }         
        }    
        
            else if(secrb.isEnabled()){
          try{
            String query="SELECT extract(month from dates), count(*) FROM FbComments where year(dates) = '2012' GROUP BY extract(month from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Reacties van 2012", "Maanden", "Aantal reacties van gebruikers", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }         
        }    
        
            else if(firstrb.isEnabled()){
          try{
            String query="SELECT extract(month from dates), count(*) FROM FbComments where year(dates) = '2011' GROUP BY extract(month from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Reacties van 2011", "Maanden", "Aantal reacties van gebruikers", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }         
        }    
        
                  
    }//GEN-LAST:event_fbgrafiekActionPerformed

    private void fppwbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fppwbActionPerformed
       try{                    
//EXTERNE DATABASE!!______________________
        String query="SELECT extract(week from dates), count(commentBody) FROM FbComments where mood = 'positief' and year(dates) = '2015' group by week(dates);";
        JDBCCategoryDataset dataset =new JDBCCategoryDataset(Database.Connectie.getConnection(),query);
        
        JFreeChart chart = ChartFactory.createLineChart("Reactions", "week", "users", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
}
    }
    }//GEN-LAST:event_fppwbActionPerformed

    private void fftrbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fftrbActionPerformed
        monthGroup.clearSelection();
        panfbn.setVisible(false);
        panfbc.setVisible(false);
        panfbp.setVisible(true); 
        this.setSize(850, 550);
        panfbp.setLocation(5, 5);
        panfbp.setSize(680, 430);
        try{
        //EXTERNE DATABASE_______________________            
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
           //EXTERNE DATABASE!!!__________________
            ResultSet rs = state.executeQuery("select * from FbComments where year(dates) = '2015' and mood = 'positief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<7; i++)
            {
                columns_name.addElement(rsmdata.getColumnName(i));
            }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {
                data_rows = new Vector();
                for(int j=1; j<7; j++)
                {
                    data_rows.addElement(rs.getString(j));
                }
                dtm.addRow(data_rows);                
            }
            //pass default table object over into jtable
            fbPosT.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try{
            String query="SELECT extract(month from dates), count(*) FROM FbComments where mood = 'positief' and year(dates) = '2015' GROUP BY extract(month from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Reacties van 2015", "Maanden", "Aantal reacties van gebruikers", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }         
    }//GEN-LAST:event_fftrbActionPerformed

    private void frtrbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frtrbActionPerformed
        monthGroup.clearSelection();
        panfbn.setVisible(false);
        panfbc.setVisible(false);
        panfbp.setVisible(true); 
        this.setSize(850, 550);
        panfbp.setLocation(5, 5);
        panfbp.setSize(680, 430);
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
           //EXTERNE DATABASE!!!__________________
            ResultSet rs = state.executeQuery("select * from FbComments where year(dates) = '2014'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<7; i++)            {
                columns_name.addElement(rsmdata.getColumnName(i));
            }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {
                data_rows = new Vector();
                for(int j=1; j<7; j++)
                {
                    data_rows.addElement(rs.getString(j));
                }
                dtm.addRow(data_rows);                
            }
            //pass default table object over into jtable
            fbPosT.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try{
            String query="SELECT extract(month from dates), count(commentBody) FROM FbComments where mood = 'positief' and year(dates) = '2014' GROUP BY extract(month from dates)";
                            
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Reacties van 2014", "Maanden", "Aantal reacties van gebruikers", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }    
        
            
    }//GEN-LAST:event_frtrbActionPerformed

    private void trdrbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trdrbActionPerformed
       monthGroup.clearSelection();
        panfbn.setVisible(false);
        panfbc.setVisible(false);
        panfbp.setVisible(true); 
        this.setSize(850, 550);
        panfbp.setLocation(5, 5);
        panfbp.setSize(680, 430);
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
         //create connection           
            Statement state = (Statement) con.createStatement();
         //EXTERNE DATABASE!!!__________________
            ResultSet rs = state.executeQuery("select * from FbComments where year(dates) = '2013'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<7; i++)
            {
                columns_name.addElement(rsmdata.getColumnName(i));
            }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {
                data_rows = new Vector();
                for(int j=1; j<7; j++)
                {
                    data_rows.addElement(rs.getString(j));
                }
                dtm.addRow(data_rows);                
            }
            //pass default table object over into jtable
            fbPosT.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        }
        
         try{
            String query="SELECT extract(month from dates), count(commentBody) FROM FbComments where mood = 'positief' and year(dates) = '2013' GROUP BY extract(month from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Reacties van 2013", "Maanden", "Aantal reacties van gebruikers", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }    
    }//GEN-LAST:event_trdrbActionPerformed

    private void secrbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_secrbActionPerformed
        monthGroup.clearSelection();
        panfbn.setVisible(false);
        panfbc.setVisible(false);
        panfbp.setVisible(true); 
        this.setSize(850, 550);
        panfbp.setLocation(5, 5);
        panfbp.setSize(680, 430);
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection
            Statement state = (Statement) con.createStatement();
  //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from FbComments where year(dates) = '2012'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();
            
            for (int i=1; i<7; i++)
            {
                columns_name.addElement(rsmdata.getColumnName(i));
            }
            dtm.setColumnIdentifiers(columns_name);
            
            while(rs.next())
            {
                data_rows = new Vector();
                for(int j=1; j<7; j++)
                {
                    data_rows.addElement(rs.getString(j));
                }
                dtm.addRow(data_rows);                
            }
            //pass default table object over into jtable
            fbPosT.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try{
            String query="SELECT extract(month from dates), count(commentBody) FROM FbComments where mood = 'positief' and year(dates) = '2012' GROUP BY extract(month from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Reacties van 2012", "Maanden", "Aantal reacties van gebruikers", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }         
    }//GEN-LAST:event_secrbActionPerformed

    private void firstrbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstrbActionPerformed
        monthGroup.clearSelection();
        /*fftrb.clearSelection();
        frtrb.clearSelection();
        trdrb.clearSelection();
        secrb.clearSelection();
        //firstrb.clearSelection();*/
        panfbn.setVisible(false);
        panfbc.setVisible(false);
        panfbp.setVisible(true); 
        this.setSize(850, 550);
        panfbp.setLocation(5, 5);
        panfbp.setSize(680, 430);
        
         if (firstrb.isEnabled()){
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();
            
            //create connection
           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from FbComments where year(dates) = '2011'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();
            
            for (int i=1; i<7; i++)
            {
                columns_name.addElement(rsmdata.getColumnName(i));
            }
            dtm.setColumnIdentifiers(columns_name);
            
            while(rs.next())
            {
                data_rows = new Vector();
                for(int j=1; j<7; j++)
                {
                    data_rows.addElement(rs.getString(j));
                }
                dtm.addRow(data_rows);                
            }
            //pass default table object over into jtable
            fbPosT.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        }
         }
         
         try{
            String query="SELECT extract(month from dates), count(commentBody) FROM FbComments where mood = 'positief' and year(dates) = '2011' GROUP BY extract(month from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Reacties van 2011", "Maanden", "Aantal reacties van gebruikers", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }         
    }//GEN-LAST:event_firstrbActionPerformed

    private void janrbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_janrbActionPerformed
     
        yearGroup.clearSelection();
        panfbn.setVisible(false);
        panfbc.setVisible(false);
        panfbp.setVisible(true); 
        this.setSize(850, 550);
        panfbp.setLocation(5, 5);
        panfbp.setSize(680, 430);        
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from FbComments where month(dates) = '1' and year(dates) = '2015' and mood = 'positief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<7; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<7; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbPosT.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        
        try{
            String query="SELECT extract(day from dates), count(commentBody) FROM FbComments where mood = 'positief' and year(dates) = '2015' and month(dates) = '1' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Positieve reacties van Jan 2015", "Maand", "Positieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal positieve commentaren in Januari", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }       
    }//GEN-LAST:event_janrbActionPerformed

    private void febrbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_febrbActionPerformed
        yearGroup.clearSelection();
        panfbn.setVisible(false);
        panfbc.setVisible(false);
        panfbp.setVisible(true); 
        this.setSize(850, 550);
        panfbp.setLocation(5, 5);
        panfbp.setSize(680, 430);        
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from FbComments where month(dates) = '2' and year(dates) = '2015' and mood = 'positief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<7; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<7; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbPosT.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(commentBody) FROM FbComments where mood = 'positief' and year(dates) = '2015' and month(dates) = '2' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Positieve reacties van Feb 2015", "Maand", "Positieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal positieve commentaren in Februari", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }     
    }//GEN-LAST:event_febrbActionPerformed

    private void mrtrbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mrtrbActionPerformed
        yearGroup.clearSelection();
        panfbn.setVisible(false);
        panfbc.setVisible(false);
        panfbp.setVisible(true); 
        this.setSize(850, 550);
        panfbp.setLocation(5, 5);
        panfbp.setSize(680, 430);        
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from FbComments where month(dates) = '3' and year(dates) = '2015' and mood = 'positief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<7; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<7; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbPosT.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
try{
            String query="SELECT extract(day from dates), count(commentBody) FROM FbComments where mood = 'poisitief' and year(dates) = '2015' and month(dates) = '3' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Positieve reacties van Mrt 2015", "Maand", "Positieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal positieve commentaren in Maart", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }   

    }//GEN-LAST:event_mrtrbActionPerformed

    private void aprrbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aprrbActionPerformed
        yearGroup.clearSelection();
        panfbn.setVisible(false);
        panfbc.setVisible(false);
        panfbp.setVisible(true); 
        this.setSize(850, 550);
        panfbp.setLocation(5, 5);
        panfbp.setSize(680, 430);        
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from FbComments where month(dates) = '4' and year(dates) = '2015' and mood = 'positief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<7; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<7; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbPosT.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(commentBody) FROM FbComments where mood = 'positief' and year(dates) = '2015' and month(dates) = '4' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Positieve reacties van Apr 2015", "Maand", "Positieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal positieve commentaren in April", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }     
    }//GEN-LAST:event_aprrbActionPerformed

    private void meirbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_meirbActionPerformed
        yearGroup.clearSelection();
        panfbn.setVisible(false);
        panfbc.setVisible(false);
        panfbp.setVisible(true); 
        this.setSize(850, 550);
        panfbp.setLocation(5, 5);
        panfbp.setSize(680, 430);        
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from FbComments where month(dates) = '5' and year(dates) = '2015' and mood = 'positief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<7; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<7; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbPosT.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(commentBody) FROM FbComments where mood = 'positief' and year(dates) = '2015' and month(dates) = '5' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Positieve reacties van Mei 2015", "Maand", "Positieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal positieve commentaren in Mei", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }     
    }//GEN-LAST:event_meirbActionPerformed

    private void junrbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_junrbActionPerformed
        yearGroup.clearSelection();
        panfbn.setVisible(false);
        panfbc.setVisible(false);
        panfbp.setVisible(true); 
        this.setSize(850, 550);
        panfbp.setLocation(5, 5);
        panfbp.setSize(680, 430);        
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from FbComments where month(dates) = '6' and year(dates) = '2015' and mood = 'positief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<7; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<7; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbPosT.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(commentBody) FROM FbComments where mood = 'positief' and year(dates) = '2015' and month(dates) = '6' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Positieve reacties van Jun 2015", "Maand", "Positieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal positieve commentaren in Juni", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }   
    }//GEN-LAST:event_junrbActionPerformed

    private void julrbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_julrbActionPerformed
        yearGroup.clearSelection();
        panfbn.setVisible(false);
        panfbc.setVisible(false);
        panfbp.setVisible(true); 
        this.setSize(850, 550);
        panfbp.setLocation(5, 5);
        panfbp.setSize(680, 430);        
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from FbComments where month(dates) = '7' and year(dates) = '2015' and mood = 'positief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<7; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<7; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbPosT.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(commentBody) FROM FbComments where mood = 'positief' and year(dates) = '2015' and month(dates) = '7' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Positieve reacties van Jul 2015", "Maand", "Positieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal positieve commentaren in Juli", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }     
    }//GEN-LAST:event_julrbActionPerformed

    private void augrbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_augrbActionPerformed
        yearGroup.clearSelection();
        panfbn.setVisible(false);
        panfbc.setVisible(false);
        panfbp.setVisible(true); 
        this.setSize(850, 550);
        panfbp.setLocation(5, 5);
        panfbp.setSize(680, 430);        
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from FbComments where month(dates) = '8' and year(dates) = '2015' and mood = 'positief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<7; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<7; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbPosT.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(commentBody) FROM FbComments where mood = 'positief' and year(dates) = '2015' and month(dates) = '8' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Positieve reacties van Aug 2015", "Maand", "Positieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal positieve commentaren in Augustus", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }       
    }//GEN-LAST:event_augrbActionPerformed

    private void seprbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seprbActionPerformed
        yearGroup.clearSelection();
        panfbn.setVisible(false);
        panfbc.setVisible(false);
        panfbp.setVisible(true); 
        this.setSize(850, 550);
        panfbp.setLocation(5, 5);
        panfbp.setSize(680, 430);        
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from FbComments where month(dates) = '9' and year(dates) = '2015' and mood = 'positief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<7; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<7; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbPosT.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(commentBody) FROM FbComments where mood = 'positief' and year(dates) = '2015' and month(dates) = '9' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Positieve reacties van Sep 2015", "Maand", "Positieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal positieve commentaren in September", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }             
    }//GEN-LAST:event_seprbActionPerformed

    private void octrbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_octrbActionPerformed
        yearGroup.clearSelection();
        panfbn.setVisible(false);
        panfbc.setVisible(false);
        panfbp.setVisible(true); 
        this.setSize(850, 550);
        panfbp.setLocation(5, 5);
        panfbp.setSize(680, 430);        
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from FbComments where month(dates) = '10' and year(dates) = '2015' and mood = 'positief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<7; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<7; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbPosT.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(commentBody) FROM FbComments where mood = 'positief' and year(dates) = '2015' and month(dates) = '10' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Positieve reacties van Oct 2015", "Maand", "Positief reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal positief commentaren in October", chart);
        frame.setVisible(true); 
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }      
    }//GEN-LAST:event_octrbActionPerformed

    private void novrbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_novrbActionPerformed
        yearGroup.clearSelection();
        panfbn.setVisible(false);
        panfbc.setVisible(false);
        panfbp.setVisible(true); 
        this.setSize(850, 550);
        panfbp.setLocation(5, 5);
        panfbp.setSize(680, 430);        
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from FbComments where month(dates) = '11' and year(dates) = '2015' and mood = 'positief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<7; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<7; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbPosT.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(commentBody) FROM FbComments where mood = 'positief' and year(dates) = '2015' and month(dates) = '11' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Positieve reacties van Nov 2015", "Maand", "Positieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal positieve commentaren in November", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }       
    }//GEN-LAST:event_novrbActionPerformed

    private void decrbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decrbActionPerformed
        yearGroup.clearSelection();
        panfbn.setVisible(false);
        panfbc.setVisible(false);
        panfbp.setVisible(true); 
        this.setSize(850, 550);
        panfbp.setLocation(5, 5);
        panfbp.setSize(680, 430);        
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from FbComments where month(dates) = '12' and year(dates) = '2015' and mood = 'positief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<7; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<7; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbPosT.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(commentBody) FROM FbComments where mood = 'positief' and year(dates) = '2015' and month(dates) = '12' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Positieve reacties van Dec 2015", "Maand", "Positieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal positieve commentaren in December", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }  
    }//GEN-LAST:event_decrbActionPerformed

    private void secrb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_secrb1ActionPerformed
       monthGroup.clearSelection();
        panfbp.setVisible(false);
        panfbc.setVisible(false);
        panfbn.setVisible(true); 
        this.setSize(850, 550);
        panfbn.setLocation(5, 5);
        panfbn.setSize(680, 430);
        try{
        //EXTERNE DATABASE_______________________            
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
           //EXTERNE DATABASE!!!__________________
            ResultSet rs = state.executeQuery("select * from FbComments where year(dates) = '2012' and mood = 'negatief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<7; i++)
            {
                columns_name.addElement(rsmdata.getColumnName(i));
            }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {
                data_rows = new Vector();
                for(int j=1; j<7; j++)
                {
                    data_rows.addElement(rs.getString(j));
                }
                dtm.addRow(data_rows);                
            }
            //pass default table object over into jtable
            fbNegT.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try{
            String query="SELECT extract(month from dates), count(commentBody) FROM FbComments where mood = 'negatief' and year(dates) = '2012' GROUP BY extract(month from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Reacties van 2012", "Maanden", "Aantal reacties van gebruikers", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }         
    }//GEN-LAST:event_secrb1ActionPerformed

    private void janrb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_janrb1ActionPerformed
        yearGroup.clearSelection();
        panfbp.setVisible(false);
        panfbc.setVisible(false);
        panfbn.setVisible(true); 
        this.setSize(850, 550);
        panfbn.setLocation(5, 5);
        panfbn.setSize(680, 430);        
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from FbComments where month(dates) = '1' and year(dates) = '2015' and mood = 'negatief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<7; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<7; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbNegT.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(commentBody) FROM FbComments where mood = 'negatief' and year(dates) = '2015' and month(dates) = '1' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Negatieve reacties van Jan 2015", "Maand", "Negatieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal negatieve commentaren in Januari", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }       
    }//GEN-LAST:event_janrb1ActionPerformed

    private void trdrb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trdrb1ActionPerformed
       monthGroup.clearSelection();
        panfbp.setVisible(false);
        panfbc.setVisible(false);
        panfbn.setVisible(true); 
        this.setSize(850, 550);
        panfbn.setLocation(5, 5);
        panfbn.setSize(680, 430);
        
        
        try{
        //EXTERNE DATABASE_______________________            
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
           //EXTERNE DATABASE!!!__________________
            ResultSet rs = state.executeQuery("select * from FbComments where year(dates) = '2013' and mood = 'negatief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<7; i++)
            {
                columns_name.addElement(rsmdata.getColumnName(i));
            }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {
                data_rows = new Vector();
                for(int j=1; j<7; j++)
                {
                    data_rows.addElement(rs.getString(j));
                }
                dtm.addRow(data_rows);                
            }
            //pass default table object over into jtable
            fbNegT.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try{
            String query="SELECT extract(month from dates), count(commentBody) FROM FbComments where mood = 'negatief' and year(dates) = '2013' GROUP BY extract(month from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Reacties van 2013", "Maanden", "Aantal reacties van gebruikers", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }       
    }//GEN-LAST:event_trdrb1ActionPerformed

    private void febrb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_febrb1ActionPerformed
        yearGroup.clearSelection();
        panfbp.setVisible(false);
        panfbc.setVisible(false);
        panfbn.setVisible(true); 
        this.setSize(850, 550);
        panfbn.setLocation(5, 5);
        panfbn.setSize(680, 430);       
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from FbComments where month(dates) = '2' and year(dates) = '2015' and mood = 'negatief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<7; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<7; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbNegT.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(commentBody) FROM FbComments where mood = 'negatief' and year(dates) = '2015' and month(dates) = '2' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Negatieve reacties van Feb 2015", "Maand", "Negatieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal negatieve commentaren in Februari", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }       
    }//GEN-LAST:event_febrb1ActionPerformed

    private void decrb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decrb1ActionPerformed
        yearGroup.clearSelection();
        panfbp.setVisible(false);
        panfbc.setVisible(false);
        panfbn.setVisible(true); 
        this.setSize(850, 550);
        panfbn.setLocation(5, 5);
        panfbn.setSize(680, 430);        
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from FbComments where month(dates) = '12' and year(dates) = '2015' and mood = 'negatief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<7; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<7; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbNegT.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(commentBody) FROM FbComments where mood = 'negatief' and year(dates) = '2015' and month(dates) = '12' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Negatieve reacties van Dec 2015", "Maand", "Negatieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal negatieve commentaren in December", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }       
    }//GEN-LAST:event_decrb1ActionPerformed

    private void mrtrb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mrtrb1ActionPerformed
        yearGroup.clearSelection();
        panfbp.setVisible(false);
        panfbc.setVisible(false);
        panfbn.setVisible(true); 
        this.setSize(850, 550);
        panfbn.setLocation(5, 5);
        panfbn.setSize(680, 430);      
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from FbComments where month(dates) = '3' and year(dates) = '2015' and mood = 'negatief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<7; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<7; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbNegT.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(commentBody) FROM FbComments where mood = 'negatief' and year(dates) = '2015' and month(dates) = '3' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Negatieve reacties van Mrt 2015", "Maand", "Negatieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal negatieve commentaren in Maart", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }       
    }//GEN-LAST:event_mrtrb1ActionPerformed

    private void firstrb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstrb1ActionPerformed
        monthGroup.clearSelection();
        panfbp.setVisible(false);
        panfbc.setVisible(false);
        panfbn.setVisible(true); 
        this.setSize(850, 550);
        panfbn.setLocation(5, 5);
        panfbn.setSize(680, 430);
        try{
        //EXTERNE DATABASE_______________________            
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
           //EXTERNE DATABASE!!!__________________
            ResultSet rs = state.executeQuery("select * from FbComments where year(dates) = '2011' and mood = 'negatief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<7; i++)
            {
                columns_name.addElement(rsmdata.getColumnName(i));
            }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {
                data_rows = new Vector();
                for(int j=1; j<7; j++)
                {
                    data_rows.addElement(rs.getString(j));
                }
                dtm.addRow(data_rows);                
            }
            //pass default table object over into jtable
            fbNegT.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        }
        
         try{
            String query="SELECT extract(month from dates), count(commentBody) FROM FbComments where mood = 'negatief' and year(dates) = '2011' GROUP BY extract(month from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Reacties van 2011", "Maanden", "Aantal reacties van gebruikers", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }        
    }//GEN-LAST:event_firstrb1ActionPerformed

    private void aprrb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aprrb1ActionPerformed
        yearGroup.clearSelection();
        panfbp.setVisible(false);
        panfbc.setVisible(false);
        panfbn.setVisible(true); 
        this.setSize(850, 550);
        panfbn.setLocation(5, 5);
        panfbn.setSize(680, 430);       
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from FbComments where month(dates) = '4' and year(dates) = '2015' and mood = 'negatief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<7; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<7; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbNegT.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(commentBody) FROM FbComments where mood = 'negatief' and year(dates) = '2015' and month(dates) = '4' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Negatieve reacties van Apr 2015", "Maand", "Negatieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal negatieve commentaren in April", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }       
    }//GEN-LAST:event_aprrb1ActionPerformed

    private void meirb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_meirb1ActionPerformed
        yearGroup.clearSelection();
        panfbp.setVisible(false);
        panfbc.setVisible(false);
        panfbn.setVisible(true); 
        this.setSize(850, 550);
        panfbn.setLocation(5, 5);
        panfbn.setSize(680, 430);        
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from FbComments where month(dates) = '5' and year(dates) = '2015' and mood = 'negatief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<7; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<7; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbNegT.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(commentBody) FROM FbComments where mood = 'negatief' and year(dates) = '2015' and month(dates) = '5' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Negatieve reacties van Mei 2015", "Maand", "Negatieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal negatieve commentaren in Mei", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }       
    }//GEN-LAST:event_meirb1ActionPerformed

    private void junrb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_junrb1ActionPerformed
        yearGroup.clearSelection();
        panfbp.setVisible(false);
        panfbc.setVisible(false);
        panfbn.setVisible(true); 
        this.setSize(850, 550);
        panfbn.setLocation(5, 5);
        panfbn.setSize(680, 430);       
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from FbComments where month(dates) = '6' and year(dates) = '2015' and mood = 'negatief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<7; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<7; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbNegT.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(commentBody) FROM FbComments where mood = 'negatief' and year(dates) = '2015' and month(dates) = '6' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Negatieve reacties van Jun 2015", "Maand", "Negatieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal negatieve commentaren in Juni", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }       
    }//GEN-LAST:event_junrb1ActionPerformed

    private void frtrb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frtrb1ActionPerformed
      monthGroup.clearSelection();
        panfbp.setVisible(false);
        panfbc.setVisible(false);
        panfbn.setVisible(true); 
        this.setSize(850, 550);
        panfbn.setLocation(5, 5);
        panfbn.setSize(680, 430);
        try{
        //EXTERNE DATABASE_______________________            
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
           //EXTERNE DATABASE!!!__________________
            ResultSet rs = state.executeQuery("select * from FbComments where year(dates) = '2014' and mood = 'negatief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<7; i++)
            {
                columns_name.addElement(rsmdata.getColumnName(i));
            }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {
                data_rows = new Vector();
                for(int j=1; j<7; j++)
                {
                    data_rows.addElement(rs.getString(j));
                }
                dtm.addRow(data_rows);                
            }
            //pass default table object over into jtable
            fbNegT.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
          try{
            String query="SELECT extract(month from dates), count(commentBody) FROM FbComments where mood = 'negatief' and year(dates) = '2014' GROUP BY extract(month from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Reacties van 2014", "Maanden", "Aantal reacties van gebruikers", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }         
        
    }//GEN-LAST:event_frtrb1ActionPerformed

    private void julrb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_julrb1ActionPerformed
        yearGroup.clearSelection();
        panfbp.setVisible(false);
        panfbc.setVisible(false);
        panfbn.setVisible(true); 
        this.setSize(850, 550);
        panfbn.setLocation(5, 5);
        panfbn.setSize(680, 430);       
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from FbComments where month(dates) = '7' and year(dates) = '2015' and mood = 'negatief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<7; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<7; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbNegT.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(commentBody) FROM FbComments where mood = 'negatief' and year(dates) = '2015' and month(dates) = '7' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Negatieve reacties van Jul 2015", "Maand", "Negatieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal negatieve commentaren in Juli", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }       
    }//GEN-LAST:event_julrb1ActionPerformed

    private void fftrb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fftrb1ActionPerformed
       monthGroup.clearSelection();
        panfbp.setVisible(false);
        panfbc.setVisible(false);
        panfbn.setVisible(true); 
        this.setSize(850, 550);
        panfbn.setLocation(5, 5);
        panfbn.setSize(680, 430);
        try{
        //EXTERNE DATABASE_______________________            
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
           //EXTERNE DATABASE!!!__________________
            ResultSet rs = state.executeQuery("select * from FbComments where year(dates) = '2015' and mood = 'negatief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<7; i++)
            {
                columns_name.addElement(rsmdata.getColumnName(i));
            }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {
                data_rows = new Vector();
                for(int j=1; j<7; j++)
                {
                    data_rows.addElement(rs.getString(j));
                }
                dtm.addRow(data_rows);                
            }
            //pass default table object over into jtable
            fbNegT.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try{
            String query="SELECT extract(month from dates), count(*) FROM FbComments where mood = 'negatief' and year(dates) = '2015' GROUP BY extract(month from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Reacties van 2015", "Maanden", "Aantal reacties van gebruikers", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }       
    }//GEN-LAST:event_fftrb1ActionPerformed

    private void augrb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_augrb1ActionPerformed
        yearGroup.clearSelection();
        panfbp.setVisible(false);
        panfbc.setVisible(false);
        panfbn.setVisible(true); 
        this.setSize(850, 550);
        panfbn.setLocation(5, 5);
        panfbn.setSize(680, 430);        
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from FbComments where month(dates) = '8' and year(dates) = '2015' and mood = 'negatief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<7; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<7; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbNegT.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(commentBody) FROM FbComments where mood = 'negatief' and year(dates) = '2015' and month(dates) = '8' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Negatieve reacties van Aug 2015", "Maand", "Negatieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal negatieve commentaren in Augustus", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }       
    }//GEN-LAST:event_augrb1ActionPerformed

    private void seprb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seprb1ActionPerformed
        yearGroup.clearSelection();
        panfbp.setVisible(false);
        panfbc.setVisible(false);
        panfbn.setVisible(true); 
        this.setSize(850, 550);
        panfbn.setLocation(5, 5);
        panfbn.setSize(680, 430);       
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from FbComments where month(dates) = '9' and year(dates) = '2015' and mood = 'negatief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<7; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<7; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbNegT.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(commentBody) FROM FbComments where mood = 'negatief' and year(dates) = '2015' and month(dates) = '9' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Negatieve reacties van Sep 2015", "Maand", "Negatieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal negatieve commentaren in September", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }               
    }//GEN-LAST:event_seprb1ActionPerformed

    private void novrb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_novrb1ActionPerformed
        yearGroup.clearSelection();
        panfbp.setVisible(false);
        panfbc.setVisible(false);
        panfbn.setVisible(true); 
        this.setSize(850, 550);
        panfbn.setLocation(5, 5);
        panfbn.setSize(680, 430);       
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from FbComments where month(dates) = '10' and year(dates) = '2015' and mood = 'negatief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<7; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<7; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbNegT.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(commentBody) FROM FbComments where mood = 'negatief' and year(dates) = '2015' and month(dates) = '11' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Negatieve reacties van Nov 2015", "Maand", "Negatieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal negatieve commentaren in November", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }       
    }//GEN-LAST:event_novrb1ActionPerformed

    private void octrb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_octrb1ActionPerformed
        yearGroup.clearSelection();
        panfbp.setVisible(false);
        panfbc.setVisible(false);
        panfbn.setVisible(true); 
        this.setSize(850, 550);
        panfbn.setLocation(5, 5);
        panfbn.setSize(680, 430);      
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from FbComments where month(dates) = '11' and year(dates) = '2015' and mood = 'negatief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<7; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<7; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbNegT.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(commentBody) FROM FbComments where mood = 'negatief' and year(dates) = '2015' and month(dates) = '10' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Negatieve reacties van Oct 2015", "Maand", "Negatieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal negatieve commentaren in October", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }       
    }//GEN-LAST:event_octrb1ActionPerformed

    private void fbnpwbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fbnpwbActionPerformed
      try{
            String query="SELECT extract(week from dates), count(*) FROM FbComments where mood= 'negatief' and year(dates) = '2015' GROUP BY extract(week from dates)";
//LOKALE DATABASE!!______________________
        //JDBCCategoryDataset dataset = new JDBCCategoryDataset(Connect.ConnectToFbn.getConnection(),query);
            
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Over de jaren", "Weeks", "users", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of negative comments", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{
        
}
    }
    }//GEN-LAST:event_fbnpwbActionPerformed

    private void fbnpjbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fbnpjbActionPerformed
      try{
            String query="SELECT extract(year from dates), count(*) FROM FbComments where mood = 'negatief' GROUP BY extract(year from dates)";            
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Reacties per jaar", "year", "users", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
}
    }
    }//GEN-LAST:event_fbnpjbActionPerformed

    private void SearchbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchbuttonActionPerformed
       try {
            int comCount = 0;
            int pCount = 0;
            int nCount = 0;
            textarea.setText("");
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();
            Statement state = (Statement) con.createStatement(); 
            ResultSet rs = state.executeQuery("select * from FbComments");
            while (rs.next()) 
            {
                if (rs.getString("commentBody").toLowerCase().contains(searchbar.getText().toLowerCase())) 
                {
                    textarea.append(rs.getString("commentBody") + "\n---------------------------------------------\n");
                    comCount++;
                    if(rs.getString("mood").equals("Positief")){
                        pCount++;
                    }
                    else if(rs.getString("mood").equals("Negatief")){
                        nCount++;
                    }   
                }
            }
                commentCountLabel.setText("Aantal Comments: " + comCount);
                positiefCount.setText("Positief: " + pCount);
                negatiefCount.setText("Negatief: " + nCount);
        } catch (ClassNotFoundException | SQLException e) {
        }        
    }//GEN-LAST:event_SearchbuttonActionPerformed

    private void secrb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_secrb2ActionPerformed
         monthGroup.clearSelection();
        try{
        //EXTERNE DATABASE_______________________            
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
           //EXTERNE DATABASE!!!__________________
            ResultSet rs = state.executeQuery("select * from tweets where year(dates) = '2012' and mood = 'negatief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<5; i++)
            {
                columns_name.addElement(rsmdata.getColumnName(i));
            }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {
                data_rows = new Vector();
                for(int j=1; j<5; j++)
                {
                    data_rows.addElement(rs.getString(j));
                }
                dtm.addRow(data_rows);                
            }
            //pass default table object over into jtable
            fbNegT1.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try{
            String query="SELECT extract(month from dates), count(tweet_body) FROM tweets where mood = 'negatief' and year(dates) = '2012' GROUP BY extract(month from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Reacties van 2012", "Maanden", "Aantal reacties van gebruikers", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }         
    }//GEN-LAST:event_secrb2ActionPerformed

    private void fbnpjb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fbnpjb1ActionPerformed
        try{
            String query="SELECT extract(year from dates), count(*) FROM tweets where mood = 'negatief' GROUP BY extract(year from dates)";            
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Reacties per jaar", "year", "users", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
}
    }
    }//GEN-LAST:event_fbnpjb1ActionPerformed

    private void fbnpmb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fbnpmb1ActionPerformed
         try{
            String query="SELECT extract(MONTH from dates), count(*) FROM tweets where mood= 'negatief' and year(dates) = '2015' GROUP BY extract(MONTH from dates)";

//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Over de jaren", "Months", "users", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{
        
}
    }
    }//GEN-LAST:event_fbnpmb1ActionPerformed

    private void mrtrb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mrtrb2ActionPerformed
        yearGroup.clearSelection();
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from tweets where month(dates) = '3' and year(dates) = '2015' and mood = 'negatief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<5; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<5; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbNegT1.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(tweet_body) FROM tweets where mood = 'negatief' and year(dates) = '2015' and month(dates) = '3' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Negatieve reacties van Mrt 2015", "Maand", "Negatieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal negatieve commentaren in Maart", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }       
    }//GEN-LAST:event_mrtrb2ActionPerformed

    private void firstrb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstrb2ActionPerformed
        monthGroup.clearSelection();
        try{
        //EXTERNE DATABASE_______________________            
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
           //EXTERNE DATABASE!!!__________________
            ResultSet rs = state.executeQuery("select * from tweets where year(dates) = '2011' and mood = 'negatief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<5; i++)
            {
                columns_name.addElement(rsmdata.getColumnName(i));
            }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {
                data_rows = new Vector();
                for(int j=1; j<5; j++)
                {
                    data_rows.addElement(rs.getString(j));
                }
                dtm.addRow(data_rows);                
            }
            //pass default table object over into jtable
            fbNegT1.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        }
        
         try{
            String query="SELECT extract(month from dates), count(tweet_body) FROM tweets where mood = 'negatief' and year(dates) = '2011' GROUP BY extract(month from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Reacties van 2011", "Maanden", "Aantal reacties van gebruikers", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }        
    }//GEN-LAST:event_firstrb2ActionPerformed

    private void febrb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_febrb2ActionPerformed
        yearGroup.clearSelection();
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from tweets where month(dates) = '2' and year(dates) = '2015' and mood = 'negatief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<5; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<5; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbNegT1.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(tweet_body) FROM tweets where mood = 'negatief' and year(dates) = '2015' and month(dates) = '2' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Negatieve reacties van Feb 2015", "Maand", "Negatieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal negatieve commentaren in Februari", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }       
    }//GEN-LAST:event_febrb2ActionPerformed

    private void decrb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decrb2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_decrb2ActionPerformed

    private void janrb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_janrb2ActionPerformed
         yearGroup.clearSelection();
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from tweets where month(dates) = '1' and year(dates) = '2015' and mood = 'negatief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<5; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<5; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbNegT1.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(tweet_body) FROM tweets where mood = 'negatief' and year(dates) = '2015' and month(dates) = '1' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Negatieve reacties van Jan 2015", "Maand", "Negatieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal negatieve commentaren in Januari", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }       
    }//GEN-LAST:event_janrb2ActionPerformed

    private void trdrb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trdrb2ActionPerformed
        monthGroup.clearSelection();
        try{
        //EXTERNE DATABASE_______________________            
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
           //EXTERNE DATABASE!!!__________________
            ResultSet rs = state.executeQuery("select * from tweets where year(dates) = '2013' and mood = 'negatief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<5; i++)
            {
                columns_name.addElement(rsmdata.getColumnName(i));
            }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {
                data_rows = new Vector();
                for(int j=1; j<5; j++)
                {
                    data_rows.addElement(rs.getString(j));
                }
                dtm.addRow(data_rows);                
            }
            //pass default table object over into jtable
            fbNegT1.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try{
            String query="SELECT extract(month from dates), count(tweet_body) FROM tweets where mood = 'negatief' and year(dates) = '2013' GROUP BY extract(month from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Reacties van 2013", "Maanden", "Aantal reacties van gebruikers", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }       
    }//GEN-LAST:event_trdrb2ActionPerformed

    private void meirb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_meirb2ActionPerformed
      yearGroup.clearSelection();    
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from tweets where month(dates) = '5' and year(dates) = '2015' and mood = 'negatief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<5; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<5; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbNegT1.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(tweet_body) FROM tweets where mood = 'negatief' and year(dates) = '2015' and month(dates) = '5' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Negatieve reacties van Mei 2015", "Maand", "Negatieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal negatieve commentaren in Mei", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }       
    }//GEN-LAST:event_meirb2ActionPerformed

    private void aprrb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aprrb2ActionPerformed
       yearGroup.clearSelection();
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from tweets where month(dates) = '4' and year(dates) = '2015' and mood = 'negatief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<5; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<5; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbNegT1.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(tweet_body) FROM tweets where mood = 'negatief' and year(dates) = '2015' and month(dates) = '4' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Negatieve reacties van Apr 2015", "Maand", "Negatieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal negatieve commentaren in April", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }       
    }//GEN-LAST:event_aprrb2ActionPerformed

    private void frtrb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frtrb2ActionPerformed
        monthGroup.clearSelection();
        try{
        //EXTERNE DATABASE_______________________            
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
           //EXTERNE DATABASE!!!__________________
            ResultSet rs = state.executeQuery("select * from tweets where year(dates) = '2014' and mood = 'negatief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<5; i++)
            {
                columns_name.addElement(rsmdata.getColumnName(i));
            }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {
                data_rows = new Vector();
                for(int j=1; j<5; j++)
                {
                    data_rows.addElement(rs.getString(j));
                }
                dtm.addRow(data_rows);                
            }
            //pass default table object over into jtable
            fbNegT1.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
          try{
            String query="SELECT extract(month from dates), count(tweet_body) FROM tweets where mood = 'negatief' and year(dates) = '2014' GROUP BY extract(month from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Reacties van 2014", "Maanden", "Aantal reacties van gebruikers", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }         
    }//GEN-LAST:event_frtrb2ActionPerformed

    private void junrb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_junrb2ActionPerformed
        yearGroup.clearSelection();    
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from tweets where month(dates) = '6' and year(dates) = '2015' and mood = 'negatief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<5; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<5; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbNegT1.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(tweet_body) FROM tweets where mood = 'negatief' and year(dates) = '2015' and month(dates) = '6' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Negatieve reacties van Jun 2015", "Maand", "Negatieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal negatieve commentaren in Juni", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }       
    }//GEN-LAST:event_junrb2ActionPerformed

    private void julrb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_julrb2ActionPerformed
        yearGroup.clearSelection();   
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from tweets where month(dates) = '7' and year(dates) = '2015' and mood = 'negatief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<5; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<5; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbNegT1.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(tweet_body) FROM tweets where mood = 'negatief' and year(dates) = '2015' and month(dates) = '7' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Negatieve reacties van Jul 2015", "Maand", "Negatieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal negatieve commentaren in Juli", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }       
    }//GEN-LAST:event_julrb2ActionPerformed

    private void fftrb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fftrb2ActionPerformed
         monthGroup.clearSelection();
        try{
        //EXTERNE DATABASE_______________________            
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
           //EXTERNE DATABASE!!!__________________
            ResultSet rs = state.executeQuery("select * from tweets where year(dates) = '2015' and mood = 'negatief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<5; i++)
            {
                columns_name.addElement(rsmdata.getColumnName(i));
            }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {
                data_rows = new Vector();
                for(int j=1; j<5; j++)
                {
                    data_rows.addElement(rs.getString(j));
                }
                dtm.addRow(data_rows);                
            }
            //pass default table object over into jtable
            fbNegT.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try{
            String query="SELECT extract(month from dates), count(*) FROM tweets where mood = 'negatief' and year(dates) = '2015' GROUP BY extract(month from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Reacties van 2015", "Maanden", "Aantal reacties van gebruikers", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }       
    }//GEN-LAST:event_fftrb2ActionPerformed

    private void augrb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_augrb2ActionPerformed
        yearGroup.clearSelection();    
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from tweets where month(dates) = '8' and year(dates) = '2015' and mood = 'negatief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<5; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<5; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbNegT1.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(tweet_body) FROM tweets where mood = 'negatief' and year(dates) = '2015' and month(dates) = '8' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Negatieve reacties van Aug 2015", "Maand", "Negatieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal negatieve commentaren in Augustus", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }       
    }//GEN-LAST:event_augrb2ActionPerformed

    private void fbnpwb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fbnpwb1ActionPerformed
      try{
            String query="SELECT extract(week from dates), count(*) FROM tweets where mood= 'negatief' and year(dates) = '2015' GROUP BY extract(week from dates)";
//LOKALE DATABASE!!______________________
        //JDBCCategoryDataset dataset = new JDBCCategoryDataset(Connect.ConnectToFbn.getConnection(),query);
            
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Over de jaren", "Weeks", "users", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of negative comments", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{
        
}
    }
    }//GEN-LAST:event_fbnpwb1ActionPerformed

    private void seprb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seprb2ActionPerformed
         yearGroup.clearSelection();  
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from tweets where month(dates) = '9' and year(dates) = '2015' and mood = 'negatief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<5; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<5; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbNegT1.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(tweet_body) FROM tweets where mood = 'negatief' and year(dates) = '2015' and month(dates) = '9' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Negatieve reacties van Sep 2015", "Maand", "Negatieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal negatieve commentaren in September", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }               
    }//GEN-LAST:event_seprb2ActionPerformed

    private void novrb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_novrb2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_novrb2ActionPerformed

    private void octrb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_octrb2ActionPerformed
         yearGroup.clearSelection();
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from tweets where month(dates) = '11' and year(dates) = '2015' and mood = 'negatief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<5; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<5; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbNegT1.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(tweet_body) FROM tweets where mood = 'negatief' and year(dates) = '2015' and month(dates) = '10' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Negatieve reacties van Oct 2015", "Maand", "Negatieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal negatieve commentaren in October", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }       
    }//GEN-LAST:event_octrb2ActionPerformed

    private void trdrb3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trdrb3ActionPerformed
        yearGroup.clearSelection();
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
         //create connection           
            Statement state = (Statement) con.createStatement();
         //EXTERNE DATABASE!!!__________________
            ResultSet rs = state.executeQuery("select * from tweets where year(dates) = '2013'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<5; i++)
            {
                columns_name.addElement(rsmdata.getColumnName(i));
            }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {
                data_rows = new Vector();
                for(int j=1; j<5; j++)
                {
                    data_rows.addElement(rs.getString(j));
                }
                dtm.addRow(data_rows);                
            }
            //pass default table object over into jtable
            fbPosT1.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        }
        
         try{
            String query="SELECT extract(month from dates), count(tweet_body) FROM tweets where mood = 'positief' and year(dates) = '2013' GROUP BY extract(month from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Reacties van 2013", "Maanden", "Aantal reacties van gebruikers", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }    
    }//GEN-LAST:event_trdrb3ActionPerformed

    private void febtrbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_febtrbActionPerformed
       yearGroup.clearSelection();
              
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from tweets where month(dates) = '2' and year(dates) = '2015' and mood = 'positief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<5; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<5; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbPosT1.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(tweet_body) FROM tweets where mood = 'positief' and year(dates) = '2015' and month(dates) = '2' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Positieve reacties van Feb 2015", "Maand", "Positieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal positieve commentaren in Februari", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }     
    }//GEN-LAST:event_febtrbActionPerformed

    private void fppmb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fppmb1ActionPerformed
         try{                    
//EXTERNE DATABASE!!______________________
        String query="SELECT extract(month from dates), count(tweet_body) FROM tweets where mood = 'positief' and year(dates) = '2015' group by month(dates);";
        JDBCCategoryDataset dataset =new JDBCCategoryDataset(Database.Connectie.getConnection(),query);
        
        JFreeChart chart = ChartFactory.createLineChart("Reactions", "Months", "users", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
}
    }
    }//GEN-LAST:event_fppmb1ActionPerformed

    private void frtrb3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frtrb3ActionPerformed
         monthGroup.clearSelection(); 
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
           //EXTERNE DATABASE!!!__________________
            ResultSet rs = state.executeQuery("select * from tweets where year(dates) = '2014'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<5; i++)            {
                columns_name.addElement(rsmdata.getColumnName(i));
            }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {
                data_rows = new Vector();
                for(int j=1; j<5; j++)
                {
                    data_rows.addElement(rs.getString(j));
                }
                dtm.addRow(data_rows);                
            }
            //pass default table object over into jtable
            fbPosT1.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try{
            String query="SELECT extract(month from dates), count(tweet_body) FROM tweets where mood = 'positief' and year(dates) = '2014' GROUP BY extract(month from dates)";
                            
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Reacties van 2014", "Maanden", "Aantal reacties van gebruikers", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }    
    }//GEN-LAST:event_frtrb3ActionPerformed

    private void mrttrbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mrttrbActionPerformed
         try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from tweets where month(dates) = '3' and year(dates) = '2015' and mood = 'positief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<5; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<5; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbPosT1.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
try{
            String query="SELECT extract(day from dates), count(tweet_body) FROM tweets where mood = 'poisitief' and year(dates) = '2015' and month(dates) = '3' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Positieve reacties van Mrt 2015", "Maand", "Positieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal positieve commentaren in Maart", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }   
    }//GEN-LAST:event_mrttrbActionPerformed

    private void fppjb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fppjb1ActionPerformed
        try{
            String query="SELECT extract(year from dates), count(tweet_body) FROM tweets where mood = 'positief' GROUP BY extract(year from dates)";            
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Reacties per jaar", "year", "users", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
}
    }
    }//GEN-LAST:event_fppjb1ActionPerformed

    private void firstrb3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstrb3ActionPerformed
         monthGroup.clearSelection();
          if (firstrb3.isEnabled()){
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();
            
            //create connection
           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from tweets where year(dates) = '2011'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();
            
            for (int i=1; i<5; i++)
            {
                columns_name.addElement(rsmdata.getColumnName(i));
            }
            dtm.setColumnIdentifiers(columns_name);
            
            while(rs.next())
            {
                data_rows = new Vector();
                for(int j=1; j<5; j++)
                {
                    data_rows.addElement(rs.getString(j));
                }
                dtm.addRow(data_rows);                
            }
            //pass default table object over into jtable
            fbPosT1.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        }
         }
         
         try{
            String query="SELECT extract(month from dates), count(tweet_body) FROM tweets where mood = 'positief' and year(dates) = '2011' GROUP BY extract(month from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Reacties van 2011", "Maanden", "Aantal reacties van gebruikers", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }         
    }//GEN-LAST:event_firstrb3ActionPerformed

    private void aprtrbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aprtrbActionPerformed
       yearGroup.clearSelection();
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from tweets where month(dates) = '4' and year(dates) = '2015' and mood = 'positief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<5; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<5; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbPosT1.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(tweet_body) FROM tweets where mood = 'positief' and year(dates) = '2015' and month(dates) = '4' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Positieve reacties van Apr 2015", "Maand", "Positieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal positieve commentaren in April", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }     
    }//GEN-LAST:event_aprtrbActionPerformed

    private void secrb3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_secrb3ActionPerformed
        monthGroup.clearSelection();
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection
            Statement state = (Statement) con.createStatement();
  //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from tweets where year(dates) = '2012'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();
            
            for (int i=1; i<5; i++)
            {
                columns_name.addElement(rsmdata.getColumnName(i));
            }
            dtm.setColumnIdentifiers(columns_name);
            
            while(rs.next())
            {
                data_rows = new Vector();
                for(int j=1; j<5; j++)
                {
                    data_rows.addElement(rs.getString(j));
                }
                dtm.addRow(data_rows);                
            }
            //pass default table object over into jtable
            fbPosT1.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try{
            String query="SELECT extract(month from dates), count(tweet_body) FROM tweets where mood = 'positief' and year(dates) = '2012' GROUP BY extract(month from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Reacties van 2012", "Maanden", "Aantal reacties van gebruikers", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }         
    }//GEN-LAST:event_secrb3ActionPerformed

    private void meitrbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_meitrbActionPerformed
      yearGroup.clearSelection();
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from tweets where month(dates) = '5' and year(dates) = '2015' and mood = 'positief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<5; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<5; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbPosT1.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(tweet_body) FROM tweets where mood = 'positief' and year(dates) = '2015' and month(dates) = '5' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Positieve reacties van Mei 2015", "Maand", "Positieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal positieve commentaren in Mei", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }     
                                      
    }//GEN-LAST:event_meitrbActionPerformed

    private void fppwb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fppwb1ActionPerformed
           try{                    
//EXTERNE DATABASE!!______________________
        String query="SELECT extract(week from dates), count(tweet_body) FROM tweets where mood = 'positief' and year(dates) = '2015' group by week(dates);";
        JDBCCategoryDataset dataset =new JDBCCategoryDataset(Database.Connectie.getConnection(),query);
        
        JFreeChart chart = ChartFactory.createLineChart("Reactions", "week", "users", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
}
    }       
    }//GEN-LAST:event_fppwb1ActionPerformed

    private void junrb3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_junrb3ActionPerformed
         yearGroup.clearSelection();
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from tweets where month(dates) = '6' and year(dates) = '2015' and mood = 'positief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<5; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<5; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbPosT1.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(tweet_body) FROM tweets where mood = 'positief' and year(dates) = '2015' and month(dates) = '6' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Positieve reacties van Jun 2015", "Maand", "Positieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal positieve commentaren in Juni", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }   
    }//GEN-LAST:event_junrb3ActionPerformed

    private void julrb3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_julrb3ActionPerformed
            yearGroup.clearSelection();
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from tweets where month(dates) = '7' and year(dates) = '2015' and mood = 'positief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<5; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<5; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbPosT1.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(tweet_body) FROM tweets where mood = 'positief' and year(dates) = '2015' and month(dates) = '7' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Positieve reacties van Jul 2015", "Maand", "Positieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal positieve commentaren in Juli", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }    
    }//GEN-LAST:event_julrb3ActionPerformed

    private void fftrb3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fftrb3ActionPerformed
         monthGroup.clearSelection();  
        try{
        //EXTERNE DATABASE_______________________            
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
           //EXTERNE DATABASE!!!__________________
            ResultSet rs = state.executeQuery("select * from tweets where year(dates) = '2015' and mood = 'positief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<5; i++)
            {
                columns_name.addElement(rsmdata.getColumnName(i));
            }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {
                data_rows = new Vector();
                for(int j=1; j<5; j++)
                {
                    data_rows.addElement(rs.getString(j));
                }
                dtm.addRow(data_rows);                
            }
            //pass default table object over into jtable
            fbPosT1.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try{
            String query="SELECT extract(month from dates), count(tweet_body) FROM tweets where mood = 'positief' and year(dates) = '2015' GROUP BY extract(month from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Reacties van 2015", "Maanden", "Aantal reacties van gebruikers", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }         
    }//GEN-LAST:event_fftrb3ActionPerformed

    private void augrb3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_augrb3ActionPerformed
        yearGroup.clearSelection();
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from tweets where month(dates) = '8' and year(dates) = '2015' and mood = 'positief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<5; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<5; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbPosT1.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(tweet_body) FROM tweets where mood = 'positief' and year(dates) = '2015' and month(dates) = '8' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Positieve reacties van Aug 2015", "Maand", "Positieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal positieve commentaren in Augustus", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        } 
    }//GEN-LAST:event_augrb3ActionPerformed

    private void seprb3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seprb3ActionPerformed
          yearGroup.clearSelection();
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from tweets where month(dates) = '9' and year(dates) = '2015' and mood = 'positief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<5; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<5; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbPosT1.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(tweet_body) FROM tweets where mood = 'positief' and year(dates) = '2015' and month(dates) = '9' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Positieve reacties van Sep 2015", "Maand", "Positieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal positieve commentaren in September", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }             
    }//GEN-LAST:event_seprb3ActionPerformed

    private void jantrbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jantrbActionPerformed
       
        yearGroup.clearSelection();
           
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from tweets where month(dates) = '1' and year(dates) = '2015' and mood = 'positief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<5; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<5; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbPosT1.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        
        try{
            String query="SELECT extract(day from dates), count(tweet_body) FROM tweets where mood = 'positief' and year(dates) = '2015' and month(dates) = '1' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Positieve reacties van Jan 2015", "Maand", "Positieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal positieve commentaren in Januari", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }       
    }//GEN-LAST:event_jantrbActionPerformed

    private void octrb3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_octrb3ActionPerformed
         yearGroup.clearSelection();
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from tweets where month(dates) = '10' and year(dates) = '2015' and mood = 'positief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<5; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<5; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbPosT1.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(tweet_body) FROM tweets where mood = 'positief' and year(dates) = '2015' and month(dates) = '10' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Positieve reacties van Oct 2015", "Maand", "Positief reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal positief commentaren in October", chart);
        frame.setVisible(true); 
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }      
    }//GEN-LAST:event_octrb3ActionPerformed

    private void decrb3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decrb3ActionPerformed
         yearGroup.clearSelection();
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from tweets where month(dates) = '12' and year(dates) = '2015' and mood = 'positief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<5; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<5; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbPosT1.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(tweet_body) FROM tweets where mood = 'positief' and year(dates) = '2015' and month(dates) = '12' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Positieve reacties van Dec 2015", "Maand", "Positieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal positieve commentaren in December", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }  
    }//GEN-LAST:event_decrb3ActionPerformed

    private void novrb3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_novrb3ActionPerformed
         yearGroup.clearSelection();
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            //EXTERNE DATABASE QUERY!!!__________________
            ResultSet rs = state.executeQuery("select * from tweets where month(dates) = '11' and year(dates) = '2015' and mood = 'positief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<5; i++)
            {  columns_name.addElement(rsmdata.getColumnName(i));  }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {   data_rows = new Vector();
                for(int j=1; j<5; j++)
                { data_rows.addElement(rs.getString(j)); }
                dtm.addRow(data_rows);  }
            //pass default table object over into jtable
            fbPosT1.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);  }
    
        try{
            String query="SELECT extract(day from dates), count(tweet_body) FROM tweets where mood = 'positief' and year(dates) = '2015' and month(dates) = '11' GROUP BY extract(day from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Positieve reacties van Nov 2015", "Maand", "Positieve reacties", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Aantal positieve commentaren in November", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }       
    }//GEN-LAST:event_novrb3ActionPerformed

    private void fbjaar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fbjaar1ActionPerformed
         try{
            String query="SELECT extract(year from dates), count(*) FROM tweets GROUP BY extract(year from dates)";            
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Reacties per jaar", "year", "users", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
}
    }
    }//GEN-LAST:event_fbjaar1ActionPerformed

    private void fbmaand1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fbmaand1ActionPerformed
       try{
            String query="SELECT extract(MONTH from dates), count(*) FROM tweets GROUP BY extract(MONTH from dates)";            
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Over de jaren", "Months", "users", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
}
    }
    }//GEN-LAST:event_fbmaand1ActionPerformed

    private void fbweek1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fbweek1ActionPerformed
        try{
            String query="SELECT extract(week from dates), count(*) FROM tweets GROUP BY extract(week from dates)";
           
        //EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Welke weken zijn ze het meest actief", "weeks", "users", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
}
    }
    }//GEN-LAST:event_fbweek1ActionPerformed

    private void fbpie1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fbpie1ActionPerformed
        //RECIEVED VALUES ARE STORED IN THESE TEXT FIELDS
            String positive = posfld1.getText();
            String negative = negfld1.getText();
            String neutraal = neufld1.getText();
            //SETS VALUES INTO THE PIECHART
            DefaultPieDataset piedata = new DefaultPieDataset();
            piedata.setValue("Positief", new Integer(positive));
            piedata.setValue("Negatief", new Integer(negative));
            piedata.setValue("Neutraal", new Integer(neutraal));
            JFreeChart ch = ChartFactory.createPieChart("Vergelijking", piedata, true, true, true);
            PiePlot p = (PiePlot)ch.getPlot();
            ChartFrame frame = new ChartFrame("Vergelijking", ch);
            frame.setVisible(true);
            frame.setSize(400,500);
    }//GEN-LAST:event_fbpie1ActionPerformed

    private void fbgrafiek1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fbgrafiek1ActionPerformed
          if(fftrb.isEnabled()){
          try{
            String query="SELECT extract(month from dates), count(*) FROM tweets where year(dates) = '2015' GROUP BY extract(month from dates)";
           
            
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Reacties van 2015", "Maanden", "Aantal reacties van gebruikers", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }         
        }    
      
      else if(frtrb.isEnabled()){
          try{
            String query="SELECT extract(month from dates), count(*) FROM tweets where year(dates) = '2014' GROUP BY extract(month from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Reacties van 2014", "Maanden", "Aantal reacties van gebruikers", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }         
        }    
        
      else if(trdrb.isEnabled()){
          try{
            String query="SELECT extract(month from dates), count(*) FROM tweets where year(dates) = '2013' GROUP BY extract(month from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Reacties van 2013", "Maanden", "Aantal reacties van gebruikers", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }         
        }    
        
            else if(secrb.isEnabled()){
          try{
            String query="SELECT extract(month from dates), count(*) FROM tweets where year(dates) = '2012' GROUP BY extract(month from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Reacties van 2012", "Maanden", "Aantal reacties van gebruikers", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }         
        }    
        
            else if(firstrb.isEnabled()){
          try{
            String query="SELECT extract(month from dates), count(*) FROM tweets where year(dates) = '2011' GROUP BY extract(month from dates)";
           
//EXTERNE DATABASE!!______________________
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(Database.Connectie.getConnection(), query);
        JFreeChart chart = ChartFactory.createLineChart("Reacties van 2011", "Maanden", "Aantal reacties van gebruikers", dataset, PlotOrientation.VERTICAL, false, true, true);
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer();
        ChartFrame frame = new ChartFrame("Amount of users that commented", chart);
        frame.setVisible(true);
        frame.setSize(1000, 650);        
        }
    catch (Exception e) { 
    JOptionPane.showMessageDialog(null, e);{        
        }
        }         
        }    
    }//GEN-LAST:event_fbgrafiek1ActionPerformed

    private void fbtjaarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fbtjaarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fbtjaarActionPerformed

    private void fbtmaandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fbtmaandActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fbtmaandActionPerformed

    private void fbtweekActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fbtweekActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fbtweekActionPerformed

    private void fbtpieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fbtpieActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fbtpieActionPerformed

    private void fbtgrafiekActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fbtgrafiekActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fbtgrafiekActionPerformed

    private void TCRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TCRBActionPerformed
        panfbn.setVisible(false);
        panfbp.setVisible(false);
        panfbc.setVisible(false);
        pantneg.setVisible(false);
        pantpos.setVisible(false);
        pantall.setVisible(true);
        panfbt.setVisible(false);    
        yearGroup.clearSelection();  
        monthGroup.clearSelection();  
        pantall.setLocation(5, 5);
        pantall.setSize(680, 432);
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            ResultSet rs = state.executeQuery("select * from tweets");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();
            
            for (int i=1; i<5; i++)
            {
                columns_name.addElement(rsmdata.getColumnName(i));
            }
            dtm.setColumnIdentifiers(columns_name);
            
            while(rs.next())
            {
                data_rows = new Vector();
                for(int j=1; j<5; j++)
                {
                    data_rows.addElement(rs.getString(j));
                }
                dtm.addRow(data_rows);                
            }
            //pass default table object over into jtable
            fbComTable1.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();           
            //create connection           
            Statement state = (Statement) con.createStatement();
           //EXTERNE DATABASE QUERY!!__________________
            ResultSet rs = state.executeQuery("SELECT count(mood)as positive FROM tweets where mood = 'positief'");
            while (rs.next()) {
                posfld1.setText(rs.getString(WIDTH));
            }
            
            ResultSet rs1 = state.executeQuery("SELECT count(mood)FROM tweets where mood = 'negatief'");
            while (rs1.next()) {
                negfld1.setText(rs1.getString(WIDTH));
            }
            
            ResultSet rs2 = state.executeQuery("SELECT count(mood)FROM tweets where mood = 'no keywords'");
            while (rs2.next()) {
                neufld1.setText(rs2.getString(WIDTH));
            }
            
            } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_TCRBActionPerformed

    private void TPRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TPRBActionPerformed
        panfbn.setVisible(false);
        panfbp.setVisible(false);
        panfbc.setVisible(false);
        pantneg.setVisible(false);
        pantpos.setVisible(true);
        pantall.setVisible(false);
        panfbt.setVisible(false);
        
        
        pantpos.setLocation(5, 5);
        pantpos.setSize(680, 432);
        try{
        //EXTERNE DATABASE_______________________            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");   
            String connectionUrl = "jdbc:sqlserver://db4free.net:3306; databaseName=barbawapatest; user=barba; password=Ruggenmerg";
            Connection con = Database.Connectie.getConnection();            
            //create connection           
            Statement state = (Statement) con.createStatement();
            ResultSet rs = state.executeQuery("select * from tweets where mood = 'positief'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();            
            for (int i=1; i<5; i++)
            {
                columns_name.addElement(rsmdata.getColumnName(i));
            }
            dtm.setColumnIdentifiers(columns_name);            
            while(rs.next())
            {
                data_rows = new Vector();
                for(int j=1; j<5; j++)
                {
                    data_rows.addElement(rs.getString(j));
                }
                dtm.addRow(data_rows);                
            }
            //pass default table object over into jtable
            fbPosT1.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_TPRBActionPerformed

    private void negfld1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negfld1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_negfld1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tables.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tables.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tables.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tables.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Tables().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackbuttonTable;
    private javax.swing.JMenuItem ExitMenu;
    private javax.swing.JRadioButton FBCRB;
    private javax.swing.JRadioButton FBNRB;
    private javax.swing.JRadioButton FBPRB;
    private javax.swing.JRadioButton FBTRB;
    private javax.swing.JMenuItem MainMenu;
    private javax.swing.JMenu OpenMenu;
    private javax.swing.JButton Searchbutton;
    private javax.swing.JRadioButton TCRB;
    private javax.swing.JRadioButton TNRB;
    private javax.swing.JRadioButton TPRB;
    private javax.swing.JMenuItem TipsMenu;
    private javax.swing.JRadioButton aprrb;
    private javax.swing.JRadioButton aprrb1;
    private javax.swing.JRadioButton aprrb2;
    private javax.swing.JRadioButton aprtrb;
    private javax.swing.JRadioButton augrb;
    private javax.swing.JRadioButton augrb1;
    private javax.swing.JRadioButton augrb2;
    private javax.swing.JRadioButton augrb3;
    private javax.swing.JLabel commentCountLabel;
    private javax.swing.JRadioButton decrb;
    private javax.swing.JRadioButton decrb1;
    private javax.swing.JRadioButton decrb2;
    private javax.swing.JRadioButton decrb3;
    private javax.swing.JTable fbComTable;
    private javax.swing.JTable fbComTable1;
    private javax.swing.JTable fbNegT;
    private javax.swing.JTable fbNegT1;
    private javax.swing.JTable fbPosT;
    private javax.swing.JTable fbPosT1;
    private javax.swing.JButton fbgrafiek;
    private javax.swing.JButton fbgrafiek1;
    private javax.swing.JButton fbjaar;
    private javax.swing.JButton fbjaar1;
    private javax.swing.JButton fbmaand;
    private javax.swing.JButton fbmaand1;
    private javax.swing.JButton fbnpjb;
    private javax.swing.JButton fbnpjb1;
    private javax.swing.JButton fbnpmb;
    private javax.swing.JButton fbnpmb1;
    private javax.swing.JButton fbnpwb;
    private javax.swing.JButton fbnpwb1;
    private javax.swing.JButton fbpie;
    private javax.swing.JButton fbpie1;
    private javax.swing.JButton fbtgrafiek;
    private javax.swing.JButton fbtjaar;
    private javax.swing.JButton fbtmaand;
    private javax.swing.JButton fbtpie;
    private javax.swing.JButton fbtweek;
    private javax.swing.JButton fbweek;
    private javax.swing.JButton fbweek1;
    private javax.swing.JRadioButton febrb;
    private javax.swing.JRadioButton febrb1;
    private javax.swing.JRadioButton febrb2;
    private javax.swing.JRadioButton febtrb;
    private javax.swing.JRadioButton fftrb;
    private javax.swing.JRadioButton fftrb1;
    private javax.swing.JRadioButton fftrb2;
    private javax.swing.JRadioButton fftrb3;
    private javax.swing.JRadioButton firstrb;
    private javax.swing.JRadioButton firstrb1;
    private javax.swing.JRadioButton firstrb2;
    private javax.swing.JRadioButton firstrb3;
    private javax.swing.JTextField fnegfld;
    private javax.swing.JTextField fneufld;
    private javax.swing.JPanel forpie;
    private javax.swing.JTextField fposfld;
    private javax.swing.JButton fppjb;
    private javax.swing.JButton fppjb1;
    private javax.swing.JButton fppmb;
    private javax.swing.JButton fppmb1;
    private javax.swing.JButton fppwb;
    private javax.swing.JButton fppwb1;
    private javax.swing.JRadioButton frtrb;
    private javax.swing.JRadioButton frtrb1;
    private javax.swing.JRadioButton frtrb2;
    private javax.swing.JRadioButton frtrb3;
    private javax.swing.JLabel here;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JLabel jNeg;
    private javax.swing.JLabel jNeg1;
    private javax.swing.JLabel jNeg2;
    private javax.swing.JLabel jNeg3;
    private javax.swing.JLabel jNeu;
    private javax.swing.JLabel jNeu1;
    private javax.swing.JLabel jNeu2;
    private javax.swing.JLabel jNeu3;
    private javax.swing.JLabel jPos;
    private javax.swing.JLabel jPos1;
    private javax.swing.JLabel jPos2;
    private javax.swing.JLabel jPos3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JRadioButton janrb;
    private javax.swing.JRadioButton janrb1;
    private javax.swing.JRadioButton janrb2;
    private javax.swing.JRadioButton jantrb;
    private javax.swing.JRadioButton julrb;
    private javax.swing.JRadioButton julrb1;
    private javax.swing.JRadioButton julrb2;
    private javax.swing.JRadioButton julrb3;
    private javax.swing.JRadioButton junrb;
    private javax.swing.JRadioButton junrb1;
    private javax.swing.JRadioButton junrb2;
    private javax.swing.JRadioButton junrb3;
    private javax.swing.JRadioButton meirb;
    private javax.swing.JRadioButton meirb1;
    private javax.swing.JRadioButton meirb2;
    private javax.swing.JRadioButton meitrb;
    private javax.swing.ButtonGroup monthGroup;
    private javax.swing.JRadioButton mrtrb;
    private javax.swing.JRadioButton mrtrb1;
    private javax.swing.JRadioButton mrtrb2;
    private javax.swing.JRadioButton mrttrb;
    private javax.swing.JLabel negatiefCount;
    private javax.swing.JTextField negfld;
    private javax.swing.JTextField negfld1;
    private javax.swing.JTextField neufld;
    private javax.swing.JTextField neufld1;
    private javax.swing.JRadioButton novrb;
    private javax.swing.JRadioButton novrb1;
    private javax.swing.JRadioButton novrb2;
    private javax.swing.JRadioButton novrb3;
    private javax.swing.JRadioButton octrb;
    private javax.swing.JRadioButton octrb1;
    private javax.swing.JRadioButton octrb2;
    private javax.swing.JRadioButton octrb3;
    private javax.swing.JPanel panfbc;
    private javax.swing.JPanel panfbn;
    private javax.swing.JPanel panfbp;
    private javax.swing.JPanel panfbt;
    private javax.swing.JPanel pantall;
    private javax.swing.JPanel pantneg;
    private javax.swing.JPanel pantpos;
    private javax.swing.JTextField posfld;
    private javax.swing.JTextField posfld1;
    private javax.swing.JLabel positiefCount;
    private javax.swing.ButtonGroup rbgroup;
    private javax.swing.JTextField searchbar;
    private javax.swing.JRadioButton secrb;
    private javax.swing.JRadioButton secrb1;
    private javax.swing.JRadioButton secrb2;
    private javax.swing.JRadioButton secrb3;
    private javax.swing.JRadioButton seprb;
    private javax.swing.JRadioButton seprb1;
    private javax.swing.JRadioButton seprb2;
    private javax.swing.JRadioButton seprb3;
    private javax.swing.JTextArea textarea;
    private javax.swing.JTextField tnegfld;
    private javax.swing.JTextField tneufld;
    private javax.swing.JTextField tposfld;
    private javax.swing.JRadioButton trdrb;
    private javax.swing.JRadioButton trdrb1;
    private javax.swing.JRadioButton trdrb2;
    private javax.swing.JRadioButton trdrb3;
    private javax.swing.ButtonGroup yearGroup;
    // End of variables declaration//GEN-END:variables
}
/*      //LOKALE DATABASE!!!___________________
        String connectionUrl = "jdbc:mysql://localhost/barbawapatest";
        String driver = "com.mysql.jdbc.Driver";
        try{
             
       // JDBCCategoryDataset dataset = new JDBCCategoryDataset(Connect.ConnectToFbn.getConnection(),query);

        //Class.forName(driver);
        try {
            con = DriverManager.getConnection(connectionUrl, "root", "root");
            mijnStat = con.createStatement();
        } catch (SQLException ex) {
            Logger.getLogger(Table.class.getName()).log(Level.SEVERE, null, ex);
        }Statement state = con.createStatement();
            //LOKALE DATABASE QUERY!!!____________________
            ResultSet rs = state.executeQuery("select * from fbcomments where mood = 'positief' and year(dates) = '2011'");
            ResultSetMetaData rsmdata = rs.getMetaData();
            //store column numbers
            int columns = rsmdata.getColumnCount();
            //set data into Jtable
            DefaultTableModel dtm = new DefaultTableModel();
            Vector columns_name = new Vector();
            Vector data_rows = new Vector();
            
            for (int i=1; i<5; i++)
            {
                columns_name.addElement(rsmdata.getColumnName(i));
            }
            dtm.setColumnIdentifiers(columns_name);
            
            while(rs.next())
            {
                data_rows = new Vector();
                for(int j=1; j<5; j++)
                {
                    data_rows.addElement(rs.getString(j));
                }
                dtm.addRow(data_rows);                
            }
            //pass default table object over into jtable
            fbPosT.setModel(dtm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(NewTable.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Table.class.getName()).log(Level.SEVERE, null, ex);
        }

* 
* 
* /*try {
                String connectionUrl = "jdbc:mysql://localhost/barbawapatest";
                String driver = "com.mysql.jdbc.Driver";
                con = DriverManager.getConnection(connectionUrl, "root", "root");
                mijnStat = con.createStatement();
           
                String searched = Searchbar.getText();
                ResultSet result = mijnStat.executeQuery("select commentBody from fbComments where commentBody like '%" + searched + "%'");
            } catch (SQLException ex) {
                Logger.getLogger(Table.class.getName()).log(Level.SEVERE, null, ex);
            }
                 
                ResultSet result = mijnStat.executeQuery("select vnaam, anaam from speler where vnaam like '%" + naam + "%'");
            try {
                DefaultComboBoxModel info = new DefaultComboBoxModel();
                sItem wie;
                while (result.next()) {
                    wie = new sItem();
                    //wie.ss_id = result.getInt("s_id");
                    wie.svnaam = result.getString("vnaam");
                    wie.sanaam = result.getString("anaam");
                    info.addElement(wie);
                    //System.out.println(result.getString("anaam"));
                    sList.setModel(info);
                }
        } catch (SQLException ex) {
            Logger.getLogger(NewTable.class.getName()).log(Level.SEVERE, null, ex);
        }*/